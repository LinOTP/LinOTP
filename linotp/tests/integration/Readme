#
#    LinOTP - the open source solution for two factor authentication
#    Copyright (C) 2010 - 2019 KeyIdentity GmbH
#
#    This file is part of LinOTP server.
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU Affero General Public
#    License, version 3, as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the
#               GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    E-mail: linotp@keyidentity.com
#    Contact: www.linotp.org
#    Support: www.keyidentity.com
#


Dependencies
============================================

You need to install all test dependencies listed in setup.py

I recommend creating a virtualenv and installing the dependencies there:

 $ mkdir /opt/selenium-venv
 $ virtualenv /opt/selenium-venv
 $ source /opt/selenium-venv/bin/activate
 $ pip install -e ".[test]"

If you are not using a remote instance, you also need an X-Server on your
machine (or a virtual framebuffer such as xvfb) and Firefox or Chrome.

When using a virtual framebuffer set the $DISPLAY env variable before
executing the tests.


Server Configuration file
============================================

To run the LinOTP Selenium Tests you need a server.cfg file.

A default file is available in the repository: server_cfg.ini


Chrome driver
============================================

The Chrome Selenium driver (for Google Chrome or Chromium) is faster and is
therefore used by default.

You can specify a different driver by editing the config file (server_cfg.ini)
or using the option --tc=selenium.driver:firefox


To install the Chrome driver on Ubuntu (14.04 and higher) follow these steps:

 $ sudo apt-get install chromium-chromedriver
 $ sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/bin/chromedriver

On Debian Jessie or higher, the Chrome driver package is named
'chromedriver'. Execute the following commands for installation:

 $ sudo apt-get install chromedriver
 $ sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/bin/chromedriver

If the Chrome driver is not available in your package management system, use
these steps:
 $ cd /usr/local/bin/

Check for the latest Chromium driver:
  https://sites.google.com/chromium.org/driver/downloads

At time of writing, the newest chromedriver is version 85. Execute the
following commands to install it on your system:

 $ wget https://chromedriver.storage.googleapis.com/98.0.4758.80/chromedriver_linux64.zip
 $ unzip chromedriver_linux64.zip
 $ rm chromedriver_linux64.zip
 $ mv chromedriver chromedriver-2.16
 $ chmod 755 chromedriver-2.16
 $ ln -s chromedriver-2.16 chromedriver

If you want to install the driver in a different location, you can use the environment
variable `webdriver_executable_path`:

 $ export webdriver_executable_path=/home/user/bin/chromedriver

If not already available under chromium-browser link your google chrome browser to chromium-browser

 $ cd /usr/bin/
 $ ln -s chromium-browser google-chrome


Remote driver
============================================

The remote setting allows testing within a remote Selenium or
Selenium grid. It can also be used to test against the
standalone Docker images supplied by the Selenium project.

To enable remote, the configuration should add:

 remote = True

Optionally, a remote URL can be specified in the form:

 remote_url = http://selenium-grid:4444/wd/hub

The driver setting will be used to determine which driver is
requested from the remote instance.


External servers
============================================

In order to run some of the tests you will need access to external servers. (e.g. an ldap test server).
We have provided these servers as standalone docker containers. You can pull the images from our docker
repository (if you have access to it) or clone the corresponding repository and build the image by
yourself.

Currently there are two of these containers, an ldap server called blackdog-ldap and a mysql
server called blackdog-mysql. If you want to go the hard way you can just clone these two repositories
and follow the instructions to build the images and then run them with

 $ docker run blackdog-ldap:latest
 $ docker run blackdog-mysql:latest

If you have access to our docker repository on gitbox, this is the procedure to follow:

1. Make an access token for yourself, through gitbox -> access Tokens and create a personal
access Token with at least "read registry" access (if you do not have the right access, as
an administrator)
2. Make docker login to this repository:
 $ docker login -u USERNAME -p YOUR-ACCESS-TOKEN gitbox.corp.keyidentity.com:5050
3. Pull the docker image:
 $ docker pull gitbox.corp.keyidentity.com:5050/docker-images/blackdog-ldap/blackdog-ldap:latest


Execution
============================================

To execute all tests:

 $ pytest --tc-file=server_cfg.ini

To execute all tests in one file:

 $ pytest --tc-file=server_cfg.ini test_create_useridresolvers.py

It is possible to overwrite some specific configuration settings as follows:

 $ pytest --tc-file=server_cfg.ini --tc=<SECTION>.<NAME>:<VALUE>

See the configuration file for the parameters that can be set.

For example, to execute tests by connecting to a remotely running linotp instance:

 $ pytest --tc-file=server_cfg.ini --tc=linotp.host:10.76.124.35


Analysing and debugging
============================================

An example to execute tests in a single file using the trace module to show the
time at each step of the tests:

 $ python -m trace -g --trace --ignore-module=os,sys,re --ignore-dir=/usr/lib \
	/usr/bin/pytest -s --tc-file=server_local.ini -v \
	--logging-filter=-requests.packages.urllib3.connectionpool \
	--debug=selenium.webdriver.remote.remote_connection \
	test_manage.py

For interactive debugging, you can use pdb or the pudb debugger, which
can be installed via:

 $ pip install pytest-pudb

Use the debugger as follows:

 $ pytest --pudb --tc-file=server_cfg.ini test_create_useridresolvers.py


Container-based selenium testing
================================

To run the selenium tests in a docker-compose setup, the containers must be
built in the project root directory via:

  $ make -f Makefile docker-build-all

You need to set some environment variables to build against our internal
servers because some dependencies may not be up to date publicly. We also
set them for our CI pipeline in `.gitlab-ci.yml`.

  $ export DEPENDENCY_DEB_REPO="http://debs-devel.corp.linotp.de/linotp3 buster linotp"
  $ export DEPENDENCY_GPG_KEY_URL="http://avocado.corp.lsexperts.de/deb-repo/ki-archive-keyring.gpg"
  $ export DEPENDENCY_GPG_KEYID=""

After you have successfully built the containers, go back to the integration test dir:

  $ cd linotp/tests/integration

Now, you can either run all tests by just *up* the compose stack or you can prepare a
shell to manually execute tests later when you have connected to the vnc server to view
what the browser does during the tests:

  $ docker-compose up # run all tests

To execute the tests manually, you can use the following command:

  $ docker-compose run --rm selenium_tester bash # to prepare the shell for manual execution

Note, that this command will run all docker_compose services because
of the dependencies configured in `docker-compose.yml` except the selenium_tester service where instead a bash shell is started.

To be able to visually inspect the browser during the tests, we need to find out what the
exposed port of the selenium chrome container is so we can use this to connect the selenium host via vnc:

  $ docker-compose port selenium 5900

The result is the host+port to which your vnc client should be able to directly connect.
The password is "secret".

  $ remote-viewer vnc://`docker-compose port selenium 5900`

Remarks:
- on MacOS X you can use the 'open' commant instead of the 'remote-viewer'

If you opted to manually run the tests, you than can start the test from your bash shell that
we started earlier by the following command on the selenium_tester machine:

  $ pytest -v -x --pudb test_realm_dialog.py

The --pudb flag will open a debugger in case of an error or exception.
