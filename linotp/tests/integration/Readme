#
#    LinOTP - the open source solution for two factor authentication
#    Copyright (C) 2010 - 2019 KeyIdentity GmbH
#
#    This file is part of LinOTP server.
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU Affero General Public
#    License, version 3, as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the
#               GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    E-mail: linotp@keyidentity.com
#    Contact: www.linotp.org
#    Support: www.keyidentity.com
#


Dependencies
============================================

You need to install all test dependencies listed in setup.py

I recommend creating a virtualenv and installing the dependencies there:

 $ mkdir /opt/selenium-venv
 $ virtualenv /opt/selenium-venv
 $ source /opt/selenium-venv/bin/activate
 $ pip install -e ".[test]"

If you are not using a remote instance, you also need an X-Server on your
machine (or a virtual framebuffer such as xvfb) and Firefox or Chrome.

When using a virtual framebuffer set the $DISPLAY env variable before
executing the tests.


Server Configuration file
============================================

To run the LinOTP Selenium Tests you need a server.cfg file.

A default file is available in the repository: server_cfg.ini


Chrome driver
============================================

The Chrome Selenium driver (for Google Chrome or Chromium) is faster and is
therefore used by default.

You can specify a different driver by editing the config file (server_cfg.ini)
or using the option --tc=selenium.driver:firefox


To install the Chrome driver on Ubuntu (14.04 and higher) follow these steps:

 $ sudo apt-get install chromium-chromedriver
 $ sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/bin/chromedriver

On Debian Jessie or higher, the Chrome driver package is named
'chromedriver'. Execute the following commands for installation:

 $ sudo apt-get install chromedriver
 $ sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/bin/chromedriver

If the Chrome driver is not available in your package management system, use
these steps:
 $ cd /usr/local/bin/

Check for the latest Chromium driver:
  https://sites.google.com/a/chromium.org/chromedriver/downloads

At time of writing, the newest chromedriver is version 85. Execute the
following commands to install it on your system:

 $ wget https://chromedriver.storage.googleapis.com/85.0.4183.87/chromedriver_linux64.zip
 $ unzip chromedriver_linux64.zip
 $ rm chromedriver_linux64.zip
 $ mv chromedriver chromedriver-2.16
 $ chmod 755 chromedriver-2.16
 $ ln -s chromedriver-2.16 chromedriver

If you want to install the driver in a different location, you can use the environment
variable `webdriver_executable_path`:

 $ export webdriver_executable_path=/home/user/bin/chromedriver

If not already available under chromium-browser link your google chrome browser to chromium-browser

 $ cd /usr/bin/
 $ ln -s chromium-browser google-chrome


Remote driver
============================================

The remote setting allows testing within a remote Selenium or
Selenium grid. It can also be used to test against the
standalone Docker images supplied by the Selenium project.

To enable remote, the configuration should add:

 remote = True

Optionally, a remote URL can be specified in the form:

 remote_url = http://selenium-grid:4444/wd/hub

The driver setting will be used to determine which driver is
requested from the remote instance.


Execution
============================================

To execute all tests:

 $ pytest --tc-file=server_cfg.ini

To execute all tests in one file:

 $ pytest --tc-file=server_cfg.ini test_create_useridresolvers.py

It is possible to overwrite some specific configuration settings as follows:

 $ pytest --tc-file=server_cfg.ini --tc=<SECTION>.<NAME>:<VALUE>

See the configuration file for the parameters that can be set.

For example, to execute tests by connecting to a remotely running linotp instance:

 $ pytest --tc-file=server_cfg.ini --tc=linotp.host:10.76.124.35


Analysing and debugging
============================================

An example to execute tests in a single file using the trace module to show the
time at each step of the tests:

 $ python -m trace -g --trace --ignore-module=os,sys,re --ignore-dir=/usr/lib \
	/usr/bin/pytest -s --tc-file=server_local.ini -v \
	--logging-filter=-requests.packages.urllib3.connectionpool \
	--debug=selenium.webdriver.remote.remote_connection \
	test_manage.py

For interactive debugging, you can use pdb or the pudb debugger, which
can be installed via:

 $ pip install pytest-pudb

Use the debugger as follows:

 $ pytest --pudb --tc-file=server_cfg.ini test_create_useridresolvers.py


Docker based selenium testing
=========================================

To run the selenium tests in a docker-compose setup, the docker files must be
build in the linotp root directory via:

  $ make -f Makefile  docker-build-all

For the build some environment variables must be set, which are defined in
the `.gitlab-ci.yml`:

  $ export DEPENDENCY_DEB_REPO="http://debs-devel.corp.linotp.de/linotp3 buster linotp"
  $ export DEPENDENCY_GPG_KEY_URL="http://avocado.corp.lsexperts.de/deb-repo/ki-archive-keyring.gpg"
  $ export DEPENDENCY_GPG_KEYID=""

After this change to the integration test directory

  $ cd linotp/tests/integration

There you start the selenium docker composition

  $ docker-compose up

After this we have to identify the port of the selenium chrome port so we can
connect to this via your vnc viewer

  $ docker-compose port selenium 5900

The result is the port to which your vnc viewer should connect - the password
is "secret"

  $ remote-viewer vnc://`docker-compose port selenium 5900`

On MacOS you use an address like `0.0.0.0:58675`

After this we have to identify the port of the selenium chrome port so we can
connect to this via your vnc viewer

  $ docker-compose run selenium_tester bash

and within this bash the tests could be started like:

  $ pytest -v -x --pudb test_realm_dialog.py

whereby in this commandline the pudb will start in case of an error.

