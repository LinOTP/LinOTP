#!/bin/bash -e

. /usr/share/debconf/confmodule

temp_conffile=


parse_db_uri() {
	#
	# parse a database uri and return a set of vaiable
	# to gather the vars call the function as follows
	#   eval $(parse_db_uri $uri)
	# which will return a set of vars like
	#  $DB_TYPE, $DB_SERVER, $DB_NAME, $DB_USER, $DB_PASS, $DB_PARAMS

	local uri="$1"
	if [ -z "$uri" ]; then
		false
		return
	fi

	local db_uri_regex='^[[:space:]]*([^: ]+)://([^:/]+):([^/@]+)@([^/:]+)(:([0-9]+))?/([^?]+)(\?(.*))?'

	if [[ ! ( "$uri" =~ $db_uri_regex )  ]]; then
		false
		return
	fi
	echo "DB_TYPE="${BASH_REMATCH[1]}"; DB_SERVER="${BASH_REMATCH[4]}"; DB_NAME="${BASH_REMATCH[7]}"; DB_PORT="${BASH_REMATCH[6]}"; DB_USER="${BASH_REMATCH[2]}"; DB_PASS="${BASH_REMATCH[3]}"; DB_PARAM="${BASH_REMATCH[9]}"; "

	true
	return
}

fix_db_encoding() {
	#  Fix encoding:
	# With python2+mysql, the data was stored in the db as
	# ISO-Latin-1.
	# Here we determine, if the db was a mysql db and without
	# charset parameter**. If this is not the case, we set a
	# flag to not recode. The flag will be used in the postinst
	# script.
	#  ** we assume, that any parameter to the db uri is a
	#     willful change and thus no encoding fix will be
	#     applied

	local uri="$1"
	eval $(parse_db_uri $uri)

	if [[ "$DB_TYPE" = "mysql" ]] && [ -z "$DB_PARAMS" ]; then
		echo "Should db encoding fix applied?"
		db_input medium linotp/database/fix_encoding || true
		db_go || true
	else
		echo "No db encofing fix sould be applied."
		db_set linotp/database/fix_encoding false
	fi
}

mk_configfile_from_linotp_ini() {
	# Support for importing configuration from previous package version
	#
	# From version 3, we use the database configuration support provided
	# by the dbconfig-common (dbc) package. When upgrading from version 2, we
	# need to provide the configuration into the dbc scripts.
	# This is not completely trivial, because:
	#  - linotp's ini format cannot be directly read by the dbc import mechanism
	#  - we cannot preseed the configuration because the questions are not yet
	#    imported
	#  - the various dbc_* variables are only checked if the package is a fresh
	#    install.
	#
	# So here we parse the configuration using regex and generate a configuration
	# in shell format, which can be read directly by the dbc scripts.
	#
	# If parsing was successful, we place the filename in the variable
	# temp_conffile

	local uri="$1"

	if [ -z $uri ]; then
		false
		return
	fi

	eval $(parse_db_uri $uri)

	if [ -z "$DB_TYPE" ]; then
		echo "fatal error: faild to parse database uri"
		false
		return
	fi

	echo "Generating dbconfig-common config using settings from linotp.ini"
	temp_conffile="$(mktemp --tmpdir linotp_config.XXXXXX)"

	if [ -z "$temp_conffile" ]; then
		echo "fatal error: could not create temporary file for configuration"
		exit -1
	fi

	dbc_upgrade="true"
cat > $temp_conffile <<- EOF
			dbtype="$DB_TYPE"
			dbserver="$DB_SERVER"
			dbname="$DB_NAME"
			dbport="$DB_PORT"
			dbuser="$DB_USER"
			dbpass="$DB_PASS"
EOF

	# File was written
	true
	return
}

db_input high linotp/apache/activate || true
db_go
db_get linotp/apache/activate
APACHE=$RET

dbc_dbtypes="mysql, pgsql"
if [ "$APACHE" = "true" ]; then
	db_input high linotp/apache/ssl_create || true
	db_go
else
	# If not using apache, you can also choose SQLlite
	dbc_dbtypes="$dbc_dbtypes, sqlite"
fi


if [ -f /usr/share/dbconfig-common/dpkg/config ]; then
	# Load dbconfig-common functions
	. /usr/share/dbconfig-common/dpkg/config

	dbc_first_version="3.0~a1"
	if dpkg --compare-versions "$2" lt "$dbc_first_version"; then
		# Look for the old style ini file.
		# If preinst already ran, the file will be in /etc/linotp.
		# Otherwise, it will still be in /etc/linotp2.
		for INIFILE in /etc/linotp/linotp.ini /etc/linotp2/linotp.ini; do
			if [ -f $INIFILE ]; then
				uri="$(grep "^sqlalchemy.url *=" $INIFILE | cut -f2- -d'=')"
				if mk_configfile_from_linotp_ini "$uri"; then

					# Tell dbc to load the configuration from the generated temporary file
					dbc_load_include="sh:${temp_conffile}"

					# check if db encoding fix should be made
					fix_db_encoding $uri

					break
				fi
			fi
		done
	fi

	# Configure dbconfig-common and ask user questions
	dbc_go linotp "$@"

	if [ -f "$temp_conffile" ]; then
		# Remove temporary file created by mk_configfile_from_linotp_ini
		rm "$temp_conffile"
	fi
fi

db_input high linotp/create_admin_note || true
db_go