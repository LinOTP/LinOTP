[build-system]
requires = ["setuptools", "wheel", "babel"]
build-backend = "setuptools.build_meta"

[project]
name = "LinOTP"
dynamic = ["version"]
description = "The Open Source solution for multi-factor authentication (server component)"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "AGPL v3" }
authors = [{ name = "netgo software GmbH", email = "info@linotp.de" }]
maintainers = [{ name = "netgo software GmbH" }]
keywords = ["authentication", "two-factor", "linotp"]
classifiers = [
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Topic :: Internet",
  "Topic :: Security",
  "Topic :: System :: Systems Administration :: Authentication/Directory",
  "Framework :: Flask",
]
# Core dependencies
dependencies = [
  "Flask",
  "Flask-Babel",
  "flask-jwt-extended",
  "flask-sqlalchemy",
  "SQLAlchemy",
  "werkzeug",
  "mako",
  "beaker",
  "docutils",
  "pycryptodomex",
  "pyrad",
  "netaddr",
  "qrcode[png]",
  "configobj",
  "httplib2",
  "requests",
  "passlib",
  "pysodium",
  "python-ldap",
  "bcrypt",
  "cryptography",
  "click<8.2",          # Click is pinned, because 8.2 is not compatible with Flask 2.1.x.
  "urllib3>=2.5.0",     # Lower bound due to CVEs (is pinned to 2.4.0 in selenium==4.33.0)
  "jsonschema",
  "smpplib",
  "psycopg2-binary",
  "mysqlclient",
  # for running LinOTP in production container
  "gunicorn",
]

[dependency-groups]
dev = [
  "pre-commit",
  "pylint",
  "autopep8",
  "mypy",
  "sqlalchemy-stubs",
  "ruff>=0.11.11",
]
test = [
  "flask_testing",
  "pytest",
  "pytest-cov",
  "pytest-freezegun",
  "pytest-flask",
  "pytest-mock",
  "pytest-testconfig",
  "pytest-test-groups",
  "pytest-xdist",
  "selenium",
  "mock",
  "setuptools",
  "freezegun",
  "coverage",
  "flaky",
]
apidocs = ["Sphinx", "mock", "webhelpers2", "jinja2"]
translations = ["babel", "pojson"]

[project.urls]
Homepage = "https://www.linotp.org"
Documentation = "https://www.linotp.org/documentation.html"
Repository = "https://github.com/LinOTP/LinOTP"
Changelog = "https://github.com/LinOTP/LinOTP/blob/main/CHANGELOG.md"

[project.scripts]
linotp = "linotp.cli:main"

[project.entry-points."flask.commands"]
audit = "linotp.cli.audit_cmd:audit_cmds"
admin = "linotp.cli.admin_cmd:admin_cmds"
backup = "linotp.cli.mysql_cmd:backup_cmds"
config = "linotp.settings:config_cmds"
dbsnapshot = "linotp.cli.dbsnapshot_cmd:dbsnapshot_cmds"
init = "linotp.cli.init_cmd:init_cmds"
ldap-test = "linotp.useridresolver.LDAPIdResolver:ldap_test"
support = "linotp.cli.support_cmd:support_cmds"
local-admins = "linotp.cli.local_admins_cmd:local_admins_cmds"

[tool.setuptools]
package-dir = { "" = "." }
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["."]
include = ["linotp*"]
exclude = ["*.tests*"]

[tool.setuptools.package-data]
linotp = [
  "i18n/*/LC_MESSAGES/*.mo",
  "dictionary",
  "public/**/*",
  "templates/**/*",
  "tokens/**/*.mako",
]

[tool.setuptools.dynamic]
version = { attr = "linotp.__version__" }

[tool.mypy]
plugins = "sqlmypy"

[tool.ruff]
lint.select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "EM",   # flake8-errmsg
  "INT",  # flake8-gettext
  "G",    # flake8-logging-format
  "PIE",  # flake8-pie
  "RSE",  # flake8-raise
  "SIM",  # flake8-simplify
  "TC",   # flake8-type-checking
  "E",    # pycodestyle errors
  "F",    # pyflakes
  "I",    # isort
  "PERF", # perflint
  "PL",   # pylint
  "RUF",  # Ruff-specific
  "FURB", # refurb 
  "UP",   # pyupgrade
  "W",    # pycodestyle warnings
  # "C90",  # mccabe complexity (disabled for now)
  # "TRY",  # tryceratops (disabled for now)
]
lint.ignore = [
  "E501",    # line too long
  "RUF012",  # ignore `mutable class default` for now
  "PLW0602", # Using global for {name} but no assignment is done
  "PLW0603", # Using the global statement to update {name} is discouraged
  "PLR0911", # Too many return statements ({returns} > {max_returns})
  "PLR0912", # Too many branches ({branches} > {max_branches})
  "PLR0913", # Too many arguments in function definition ({c_args} > {max_args})
  "PLR0915", # Too many statements ({statements} > {max_statements})
  "PLR1704", # Redefining argument with the local name {name}
  "PLW1641", # Object does not implement __hash__ method
  "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
  "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
]
