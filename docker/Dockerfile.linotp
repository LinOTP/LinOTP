# This Dockerfile creates several images for LinOTP:
# - prod: Production image (default target)
# - testenv-pypi: Dedicated environment for running unit and functional tests (pytest) and generating apidocs
# - testenv: Test environment for running e2e tests
# - testimg: Test image with certificates and test data (running as service linotp in e2e tests)
#
# Usage:
# - Production build:        docker build -f Dockerfile.linotp -t linotp .
# - PyTest environment:      docker build -f Dockerfile.linotp --target testenv-pypi -t linotp:testenv-pypi .
# - E2E Test environment:    docker build -f Dockerfile.linotp --target testenv -t linotp:testenv .
# - E2E Test image:          docker build -f Dockerfile.linotp --target testimg -t linotp:testimg .
#
# Testing workflows:
# 1. For unit/functional tests (pytest):
#    - Run: docker run --rm linotp:testenv-pypi make unittests PYTESTARGS="-n auto"
#    - Run: docker run --rm linotp:testenv-pypi make functionaltests PYTESTARGS="-n auto"
#
# 2. For end-to-end tests:
#    - Use testenv image for test execution
#    - Use testimg image as LinOTP service
#    - Configure with docker-compose for full test environment


###############################################################################
# Base stage - Contains common runtime dependencies and configurations        #
###############################################################################
ARG BASE_IMAGE=python:3.11-slim-bookworm
FROM $BASE_IMAGE AS base

# Common environment variables:
# - Python configuration to improve container execution
# - UV package manager settings for better dependency management
# - LinOTP specific paths
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    UV_COMPILE_BYTECODE=1 \
    UV_NO_EDITABLE=1 \
    UV_LOCKED=1 \
    UV_LINK_MODE=copy \
    UV_PYTHON_DOWNLOADS=0 \
    LINOTP_HOME=/app \
    TRANSLATIONS_DIR=/translations
ENV VENV_ROOT=$LINOTP_HOME/.venv
ENV PATH=$VENV_ROOT/bin:$PATH

# Install common runtime dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends \
    # required for python-ldap
    libldap2-dev libsasl2-dev \
    # required for pysodium
    libsodium-dev \
    # required for mysql
    default-libmysqlclient-dev pkg-config \
    # custom root-level CA certificate handling
    ca-certificates doas \
    # entrypoint and signal handling
    tini \
    # required to run the HEALTHCHECK command
    curl

RUN python -m pip install --upgrade pip==25.2

WORKDIR $LINOTP_HOME


###############################################################################
# Builder stage - Contains build tools and compiles translations              #
#                                                                             #
# This stage installs build dependencies and compiles the application.        #
# None of these tools will be present in the final image.                     #
###############################################################################
FROM base AS builder

# Get uv package manager for faster Python package installation
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/

# Install build-only dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    make \
    netcat-openbsd \
    && uv sync --only-group translations

# Build translations
RUN --mount=type=cache,target=/root/.cache/uv \
    # mount linotp with rw permissions to write json translation files
    --mount=type=bind,source=linotp,target=linotp,rw \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    --mount=type=bind,source=Makefile.linotp,target=Makefile.linotp \
    make -f Makefile.linotp compile_catalog && \
    mkdir -p $TRANSLATIONS_DIR && \
    cd $LINOTP_HOME/linotp/i18n/ && \
    find . -type f -name "*.mo" -exec cp --parents {} "$TRANSLATIONS_DIR"/ \; \
    # Install LinOTP and its prod dependencies into VENV
    && uv sync --no-dev


###############################################################################
# PyTest environment stage - Environment for unit and functional tests        #
#                                                                             #
# This image is needed since we cant use the prod image for running tests as  #
# its envs are used to init Flask (and cant be overwritten by our test setup) #
###############################################################################
FROM builder AS testenv-pypi

# Install test dependencies
COPY --from=builder /bin/uv /bin/
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=linotp,target=linotp \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    apt-get update && apt-get install -y --no-install-recommends \
    netcat-openbsd \
    && uv sync --no-dev --group test

###############################################################################
# Production stage - Final image with minimal runtime dependencies            #
#                                                                             #
# Contains only the necessary components for running LinOTP in production.    #
###############################################################################
FROM base AS prod

HEALTHCHECK --interval=20s --timeout=5s --retries=3 --start-period=10s \
    CMD curl -sfL http://localhost:5000/healthcheck/status || exit 1

# Default LinOTP runtime configuration
ENV LINOTP_ROOT_DIR=/data
ENV LINOTP_USER=linotp \
    LINOTP_ADMIN_USER=admin \
    LINOTP_ADMIN_PASSWORD= \
    LINOTP_CFG= \
    LINOTP_DATABASE_URI=sqlite:///$LINOTP_ROOT_DIR/linotp.db \
    LINOTP_DB_WAITTIME=5s \
    LINOTP_SESSION_COOKIE_SECURE=true \
    LINOTP_GET_CLIENT_ADDRESS_FROM_POST_DATA=false \
    LINOTP_LOG_FILE_DIR=/ \
    LINOTP_LOG_FILE_NAME=/dev/null \
    LINOTP_CACHE_DIR=/cache \
    LINOTP_BACKUP_DIR=/backups \
    LINOTP_BABEL_TRANSLATION_DIRECTORIES=/custom-translations;$TRANSLATIONS_DIR \
    LINOTP_CUSTOM_TEMPLATES_DIR=/custom-templates \
    CUSTOM_ASSETS_DIR=/custom-assets \
    LINOTP_DISABLE_CONTROLLERS="gettoken" \
    FLASK_APP=linotp.app \
    FLASK_ENV=production \
    REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt

# Copy artifacts from builder
COPY --from=builder $VENV_ROOT $VENV_ROOT
COPY --from=builder $TRANSLATIONS_DIR $TRANSLATIONS_DIR
COPY linotpapp.py docker/linotp/entrypoint.sh docker/linotp/wait_for_db.py docker/linotp/symlink_custom_assets.py ./
COPY docker/linotp/install-ca-certificates.sh /usr/local/sbin/install-ca-certificates
COPY docker/linotp/doas.conf /etc/doas.conf

# Setup directories and permissions
RUN mkdir -p \
    $LINOTP_ROOT_DIR \
    $LINOTP_CACHE_DIR \
    $LINOTP_BACKUP_DIR \
    $LINOTP_CUSTOM_TEMPLATES_DIR \
    $TRANSLATIONS_DIR \
    && chmod 644 /etc/doas.conf \
    && python symlink_custom_assets.py && rm symlink_custom_assets.py \
    && ln -s /usr/local/share/ca-certificates /ca-certificates \
    # remove setuptools due to vulnerabilities
    && rm -rf /usr/local/lib/python3.11/site-packages/setuptools* \
    && useradd -r $LINOTP_USER \
    && chown -R $LINOTP_USER:$LINOTP_USER \
    $LINOTP_ROOT_DIR \
    $LINOTP_CACHE_DIR \
    $LINOTP_BACKUP_DIR

USER $LINOTP_USER

VOLUME [ "$LINOTP_ROOT_DIR", "$LINOTP_CACHE_DIR" ]
EXPOSE 5000

ENTRYPOINT [ "tini", "--", "./entrypoint.sh" ]


###############################################################################
# Test environment stage - Environment for running integration tests          #
#                                                                             #
# This stage adds test dependencies and tools required for running tests.     #
###############################################################################
FROM prod AS testenv

USER root

# Install dockerfy for checking test container startup and conversion of docker_cfg.ini.tmpl
RUN curl -LO https://github.com/markriggins/dockerfy/releases/download/0.2.6/dockerfy-linux-amd64-0.2.6.tar.gz && \
    tar -C /usr/local/bin -xzvf dockerfy-linux-amd64*.gz && \
    rm dockerfy-linux-amd64*.gz

# Get uv package manager
COPY --from=builder /bin/uv /bin/

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    make 

# Install test dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    --mount=type=bind,source=linotp,target=linotp \
    uv sync --no-dev --group test

USER $LINOTP_USER
ENTRYPOINT [""]


###############################################################################
# Test image stage - Image that runs LinOTP in e2e tests as service           #
#                                                                             #
# This stage prepares a LinOTP instance for testing by:                       #
# - Adding test certificates                                                  #
# - Including test data                                                       #
# - Configuring cache directories for CI compatibility                        #
###############################################################################
FROM prod AS testimg

USER root

# Rename cache dir for GitLab CI/CD compatibility
ENV LINOTP_CACHE_DIR=/cache-linotp
RUN mkdir -p $LINOTP_CACHE_DIR && \
    chown -R $LINOTP_USER:$LINOTP_USER $LINOTP_CACHE_DIR

# Add test certificates and data
COPY linotp/tests/integration/certificates/* /usr/local/share/ca-certificates/
COPY linotp/tests/integration/testdata/se_mypasswd /etc/se_mypasswd
RUN update-ca-certificates

USER $LINOTP_USER


###############################################################################
# Set the default target to prod                                              #
###############################################################################
FROM prod
