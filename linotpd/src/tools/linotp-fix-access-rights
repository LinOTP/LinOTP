#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
#    LinOTP - the open source solution for two factor authentication
#    Copyright (C) 2010 - 2018 KeyIdentity GmbH
#
#    This file is part of LinOTP server.
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU Affero General Public
#    License, version 3, as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the
#               GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    E-mail: linotp@keyidentity.com
#    Contact: www.linotp.org
#    Support: www.keyidentity.com
#

VERSION = '0.1'
import os, sys
from getopt import getopt, GetoptError
import ConfigParser
from subprocess import call
import ast

def usage():
    print  '''
    Parameter:
    -f <linotp.ini file>
    -u <linotp user>
    -h : help
    '''

def fix_rights(file, user):

    config_file = os.path.basename(file)
    config_path = os.path.abspath(os.path.dirname(file))
    config = ConfigParser.ConfigParser()
    config.read(file)
    config.set("DEFAULT", "here", config_path)
    config.set("app:main", "here", config_path)
    cache_dir = config.get('app:main', "cache_dir")
    enckey = config.get("DEFAULT", "linotpSecretFile")
    who_ini = config.get("app:main", "who.config_file")
    logfile = os.path.abspath(ast.literal_eval(config.get("handler_file", "args"))[0])

    # TODO: which home directory?
    try:
        call("/usr/sbin/adduser  --no-create-home --system %s" % user, shell=True)
        print "Created user %s" % user
    except Exception, e:
        print "Failed to create user %s: %s" % (user, str(e))

    try:
        call("chmod -R 600 %s" % cache_dir, shell=True)
        call("find %s -type d -exec chmod 700 {} \;" % cache_dir, shell=True)
        call("chown -R %s %s" % (user, cache_dir), shell=True)
        print "Fixed access rights for %s" % cache_dir
    except Exception, e:
        print "Failed to fix access rights for %s" % cache_dir

    try:
        call("chmod 400 %s" % enckey, shell=True)
        call("chown %s %s" % (user, enckey), shell=True)
        print "Fixed access rights for %s" % enckey
    except Exception, e:
        print "Failed to fix access rights for %s" % enckey

    try:
        call("chmod 400 %s" % who_ini, shell=True)
        call("chown %s %s" % (user, who_ini), shell=True)
        print "Fixed access rights for %s" % who_ini
    except Exception, e:
        print "Failed to fix access rights for %s" % who_ini

    try:
        call("chmod 400 %s" % file, shell=True)
        call("chown %s %s" % (user, file), shell=True)
        print "Fixed access rights for %s" % file
    except Exception, e:
        print "Failed to fix access rights for %s" % who_ini

    try:
        call("chmod -R 644 %s" % os.path.dirname(logfile), shell=True)
        call("find %s -type d -exec chmod 755 {} \;" % os.path.dirname(logfile), shell=True)
        call("chown -R %s %s" % (user, os.path.dirname(logfile)), shell=True)
        print "Fixed access rights for %s" % os.path.dirname(logfile)
    except Exception, e:
        print "Failed to fix access rights for %s" % os.path.dirname(logfile)


def main():

    file = ""
    user = ""
    try:
        opts, args = getopt(sys.argv[1:], "f:u:h", ["file=", "user=", "help"])

    except GetoptError:
        print "There is an error in your parameter syntax:"
        usage()
        sys.exit(1)

    for opt, arg in opts:
        if opt in ('-f', '--file'):
            file = arg
        elif opt in ('-h', '--help'):
            usage()
            sys.exit(1)
        elif opt in ('-u', '--user'):
            user = arg

    if file and user:
        fix_rights(file, user)
    else:
        usage()
        sys.exit(2)

if __name__ == '__main__':
    main()
