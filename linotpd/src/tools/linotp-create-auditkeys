#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
#    LinOTP - the open source solution for two factor authentication
#    Copyright (C) 2010 - 2018 KeyIdentity GmbH
#
#    This file is part of LinOTP server.
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU Affero General Public
#    License, version 3, as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the
#               GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    E-mail: linotp@keyidentity.com
#    Contact: www.linotp.org
#    Support: www.keyidentity.com
#

VERSION = '0.1'
import os, sys
from getopt import getopt, GetoptError
import ConfigParser
from subprocess import call


def usage():
    print  '''
    Parameter:
    -f <linotp.ini file>
    -h : help
    '''


def create_keys(file):
    print "Creating audit signing keys..."
    config_file = os.path.basename(file)
    config_path = os.path.abspath(os.path.dirname(file))
    config = ConfigParser.ConfigParser()
    config.read(file)
    config.set("DEFAULT", "here", config_path)
    private = config.get('DEFAULT', "linotpAudit.key.private")
    public = config.get('DEFAULT', "linotpAudit.key.public")

    r = call("openssl genrsa -out %s 2048" % private, shell=True)
    if r == 0:
        print "create private key: %s" % private

    r = call("openssl rsa -in %s -pubout -out %s" % (private, public), shell=True)
    if r == 0:
        print "written public key: %s" % public



def main():

    file = ""
    try:
        opts, args = getopt(sys.argv[1:], "f:", ["file="])

    except GetoptError:
        print "There is an error in your parameter syntax:"
        usage()
        sys.exit(1)

    for opt, arg in opts:
        if opt in ('-f', '--file'):
            file = arg
        elif opt in ('-h', '--help'):
            usage()
            sys.exit(1)

    if file:
        create_keys(file)
    else:
        usage()
        sys.exit(2)

if __name__ == '__main__':
    main()
