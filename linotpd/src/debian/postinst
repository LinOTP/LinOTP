#!/bin/bash

set -e

. /usr/share/debconf/confmodule
. /usr/share/dbconfig-common/dpkg/postinst

NEW_VERSION='@@@DEB_VERSION@@@'

CONFIG_DIR=/etc/linotp
LINOTP_ETC_CFG=$CONFIG_DIR/linotp.cfg
REALM="LinOTP2 admin area"
DIGESTFILE=$CONFIG_DIR/admins
LOGDIR=/var/log/linotp
CACHEDIR=/var/cache/linotp
OLDCACHEDIR=$CONFIG_DIR/data
TEMPLATEDIR=$CONFIG_DIR/custom-templates
LIBDIR=/var/lib/linotp
FAKE_PASSWORD=This_is_not_the_real_password_we_just_do_not_want_to_be_asked_again_in_case_of_updating_the_package
LSB_RELEASE=`which lsb_release || true`

LINOTP_USER=linotp

msg="LinOTP: "

echo_prio() {
  t=$(date +"%Y/%m/%d - %T")
  echo >&2 "$t $1 [linotp postinst] $2"
}
echo_info() {
  echo_prio INFO "$1"
}
echo_warn() {
  echo_prio WARNING "$1"
}
echo_error() {
  echo_prio ERROR "$1"
}
echo_log() {
  echo >&2 "${msg}$1"
}

# Try to figure out what we are supposed to do

INSTALL_ACTION=install
if [ -n "$2" ]; then
    INSTALLED_VERSION="$2"
  if dpkg --compare-versions "${NEW_VERSION}" eq "${INSTALLED_VERSION}"; then
    INSTALL_ACTION=reinstall
  elif dpkg --compare-versions "${NEW_VERSION}" gt "${INSTALLED_VERSION}"; then
    INSTALL_ACTION=upgrade
  else
    INSTALL_ACTION=downgrade
  fi
fi

# Currently debconf's postinst script does not use the 'reconfigure' parameter
# but instead sets DEBCONF_RECONFIGURE to 1. The recommended method for dealing
# with this and being future-proof is to support both. See debconf-devel manpage
# for details.

INSTALL_MODE="install"
if [ "$1" = "reconfigure" -o "$DEBCONF_RECONFIGURE" = "1" ]; then
  INSTALL_MODE="reconfigure"
elif [ "$1" = "configure" -a -n "$INSTALLED_VERSION" ]; then
  INSTALL_MODE="reinstall"
fi

echo_info "Installation mode: $INSTALL_MODE"
echo_info "Installed version: ${INSTALLED_VERSION:-(none)}"
echo_info "New version: $NEW_VERSION"
echo_info "Installation action: $INSTALL_ACTION"

#####################
# Utility functions #
#####################

# create_dir MESSAGE NAME [clear]
#
# Checks if a directory exists. If it doesn't, creates it and gives it
# to the $LINOTP_USER user. If the directory already exists and the
# word "clear" is passed as the third parameter, empty the directory
# of all files and subdirectories. The first parameter is an
# explanatory string used in log messages.

create_dir() {
  dirmsg="$1"
  dirname="$2"
  if [ ! -d "$dirname" ]; then
    mkdir -p "$dirname"
    chown -R "$LINOTP_USER" "$dirname"
    echo_log "Created $dirmsg directory: $dirname"
  else
    echo_log "Using existing $dirmsg directory: $dirname"
    if [ "$3" == "clear" ]; then
      echo_log "Clearing $dirname"
      rm -rf "$dirname"/*
    fi
  fi
}

# check_user USERNAME GECOS
#
# Check whether a given user exists, and create the user as a system
# user if necessary.

check_user() {
  user="$1"
  if ! getent passwd "$user" >/dev/null; then
    adduser --system --disabled-login --gecos "$2" \
      --shell /bin/false "$user" >/dev/null
    echo_log "Created user '$user'"
  fi
}

# create_cfg_file
#
# Create the file needed for configuration.
#
# This will be populated with the database location
create_cfg_file() {
  if [ -f "$LINOTP_ETC_CFG" ]; then
    echo_log "Configuration file already exists: $LINOTP_ETC_CFG"
  else
    old_umask="$(umask)"
    umask 022
    cat <<- CFG_EOF > $LINOTP_ETC_CFG
    # LinOTP configuration file
    #
    # LinOTP can be configured here, or alternatively
    # by dropping individual configuration snippets
    # in /etc/linotp/conf.d/<name>.cfg
CFG_EOF
    chown linotp $LINOTP_ETC_CFG
    umask=$old_umask
  fi
}

# configure_apache
#
# Obtains configuration information from debconf and uses that to
# configure apache webserver if enabled

configure_apache() {
  db_get linotp/apache/activate
  APACHE=$RET

  if [ "$APACHE" != "true" ]; then
    a2dissite linotp || echo_warn "Could not disable Apache linotp host"
    return
  fi

  db_get linotp/apache/admin_password
  if [ "$RET" != "$FAKE_PASSWORD" ]; then
    # Only update the password if it is not the fake password
    PWDIGEST=$(echo -n "admin:$REALM:$RET" | md5sum | cut -f1 -d ' ')
    echo "admin:$REALM:$PWDIGEST" >"$DIGESTFILE"
  fi
  # delete password from database
  db_set linotp/apache/admin_password "$FAKE_PASSWORD"

  db_get linotp/apache/ssl_create
  APACHE_SSL_CREATE=$RET
  db_set linotp/apache/ssl_create false

  # Copy virtual host definition for LinOTP to /etc/apache2
  APACHE2_VERSION=$(dpkg -s apache2 | grep "^Version:" | cut -d' ' -f2)
  if [ -z "$APACHE2_VERSION" ]; then
    echo_error "Apache requested but apache2 isn't installed, aborting"
    exit 1
  fi

  if [ ! -f /etc/apache2/sites-available/linotp.conf ]; then
    echo_log "Adding Apache available site: linotp.conf"
    cp /usr/share/doc/linotp/examples/apache-site.conf /etc/apache2/sites-available/linotp.conf
  else
    echo_log "Apache already configured, leaving intact."
  fi

  a2ensite linotp

  for mod in auth_digest wsgi ssl headers; do
    a2enmod -q $mod
  done

  echo_log "Basic Apache configuration done"

  # Ensure the Apache wsgi process can read the linotp configuration
  WSGI_USER=www-data
  SENSITIVE_FILES="audit-private.pem conf.d/01-debian-database.cfg encKey"

  echo_log "Setting permissions on $SENSITIVE_FILES"
  for name in $SENSITIVE_FILES; do
    FILE="$CONFIG_DIR"/$name
    if [ -f "$FILE" ]; then
      chgrp "$WSGI_USER" "$FILE"
      chmod g+r "$FILE"
    fi
  done

  if [ "$APACHE_SSL_CREATE" = "true" ]; then
    echo_log "Making self-signed certificate"
    # in appliance install these directories do not exist, yet
    [ -d /etc/ssl/private ] || mkdir -p /etc/ssl/private
    [ -d /etc/ssl/certs ] || mkdir -p /etc/ssl/certs
    openssl req -new -x509 -newkey rsa:2048 \
      -subj /CN=`hostname`.`dnsdomainname` -days 768 \
      -out /etc/ssl/certs/linotpserver.pem \
      -keyout /etc/ssl/private/linotpserver.key \
      -nodes
    echo_log "Self-signed certificate created"
  fi
  invoke-rc.d apache2 reload
  echo_log "done setting up apache with ssl"

}

# create_tmpfiles FILE
#
# This is a greatly simplified version of "systemd-tmpfiles" (it only
# does what we need). It saves us from having to install systemd in
# a Docker environment just to get at "systemd-tmpfiles". Of course
# we could just create and chown /run/linotp instead but that wouldn't
# be DRY.

create_tmpfiles() {
  while read -a f; do
    case "${f[0]}" in
      d) mkdir -p -m "${f[2]}" "${f[1]}"
        chown "${f[3]}:${f[4]}" "${f[1]}"
        ;;
      *) echo >&2 "$0: unsupported entry type '${f[0]}', ignoring"
        ;;
    esac
  done </usr/lib/tmpfiles.d/$1
}

# Here's where the actual execution of the postinst file starts.

if [ "$1" = configure ]; then
  # Make sure the LinOTP user exists
  check_user "$LINOTP_USER" "LinOTP Server"

  create_dir "log" "$LOGDIR"
  create_dir "lib" "$LIBDIR"
  create_dir "cache" "$CACHEDIR"
  create_dir "template" "$TEMPLATEDIR"
  create_tmpfiles linotp.conf  # for DATA_DIR

  create_cfg_file

fi

# Allow dbconfig-common to configure the database
dbc_first_version="3.0~a0"
dbc_go linotp "$@"

case "$1" in
  configure)

    if [ ! -f $CONFIG_DIR/encKey ]; then
      su -c "linotp init enc-key" "$LINOTP_USER"
    fi
    if [ ! -f $CONFIG_DIR/audit-private.pem ] && [ ! -f $CONFIG_DIR/audit-public.pem ]; then
      su -c "linotp init audit-keys" "$LINOTP_USER"
    fi

    # If we have a Mako template cache directory lying around from an
    # earlier version of LinOTP, get rid of it.
    if [ -d "$OLDCACHEDIR" ] && dpkg --compare-versions "$2" lt-nl "3.0~b0"; then
      echo_log "Disposing of $OLDCACHEDIR (now using $CACHEDIR instead)"
      rm -rf "$OLDCACHEDIR"
    fi

    # In case of an update, check if the fix encoding should be triggered
    if dpkg --compare-versions "$2" lt-nl "3.0~b0"; then
        db_get linotp/database/fix_encoding
        FIX_ENCODING=$RET
        if [ "$FIX_ENCODING" = "true" ]; then
                echo_info "Applying database encoding fix"
                linotp admin fix-db-encoding
        fi
    fi

    configure_apache

    # TODO: probably not needed
    chown -R "$LINOTP_USER" "$LOGDIR"

    rm -f $CONFIG_DIR/we_are_doing_an_upgrade
  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
  ;;

  *)
    echo "postinst called with unknown argument \`$1'" >&2
    exit 1
  ;;
esac

#DEBHELPER#
