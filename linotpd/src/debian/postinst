#!/bin/bash

set -e

. /usr/share/debconf/confmodule
. /usr/share/dbconfig-common/dpkg/postinst

NEW_VERSION='@@@DEB_VERSION@@@'

CONFIG_DIR=/etc/linotp
LINOTP_CFG=$CONFIG_DIR/linotp.cfg
ENCKEYFILE=$CONFIG_DIR/encKey
REALM="LinOTP admin area"
DIGESTFILE=$CONFIG_DIR/admins
LOGDIR=/var/log/linotp
CACHEDIR=$CONFIG_DIR/data
TEMPLATEDIR=$CONFIG_DIR/custom-templates
LIBDIR=/var/lib/linotp
RAND_DEVICE=/dev/urandom
FAKE_PASSWORD=This_is_not_the_real_password_we_just_do_not_want_to_be_asked_again_in_case_of_updating_the_package
LSB_RELEASE=`which lsb_release || true`

LINOTP_USER=linotp

msg="LinOTP: "

echo_prio() {
  t=$(date +"%Y/%m/%d - %T")
  echo >&2 "$t $1 [linotp postinst] $2"
}
echo_info() {
  echo_prio INFO "$1"
}
echo_warn() {
  echo_prio WARNING "$1"
}
echo_error() {
  echo_prio ERROR "$1"
}
echo_log() {
  echo >&2 "${msg}$1"
}

# Try to figure out what we are supposed to do

INSTALL_ACTION=install
if [ -n "$2" ]; then
    INSTALLED_VERSION="$2"
  if dpkg --compare-versions "${NEW_VERSION}" eq "${INSTALLED_VERSION}"; then
    INSTALL_ACTION=reinstall
  elif dpkg --compare-versions "${NEW_VERSION}" gt "${INSTALLED_VERSION}"; then
    INSTALL_ACTION=upgrade
  else
    INSTALL_ACTION=downgrade
  fi
fi

# Currently debconf's postinst script does not use the 'reconfigure' parameter
# but instead sets DEBCONF_RECONFIGURE to 1. The recommended method for dealing
# with this and being future-proof is to support both. See debconf-devel manpage
# for details.

INSTALL_MODE="install"
if [ "$1" = "reconfigure" -o "$DEBCONF_RECONFIGURE" = "1" ]; then
  INSTALL_MODE="reconfigure"
elif [ "$1" = "configure" -a -n "$INSTALLED_VERSION" ]; then
  INSTALL_MODE="reinstall"
fi

echo_info "Installation mode: $INSTALL_MODE"
echo_info "Installed version: ${INSTALLED_VERSION:-(none)}"
echo_info "New version: $NEW_VERSION"
echo_info "Installation action: $INSTALL_ACTION"

#####################
# Utility functions #
#####################

# create_dir MESSAGE NAME [clear]
#
# Checks if a directory exists. If it doesn't, creates it and gives it
# to the $LINOTP_USER user. If the directory already exists and the
# word "clear" is passed as the third parameter, empty the directory
# of all files and subdirectories. The first parameter is an
# explanatory string used in log messages.

create_dir() {
  dirmsg="$1"
  dirname="$2"
  if [ ! -d "$dirname" ]; then
    mkdir -p "$dirname"
    chown -R "$LINOTP_USER" "$dirname"
    echo_log "Created $dirmsg directory: $dirname"
    else
    echo_log "Using existing $dirmsg directory: $dirname"
    if [ "$3" == "clear" ]; then
      echo_log "Clearing $dirname"
      rm -rf "$dirname"/*
    fi
  fi
}

# check_user USERNAME GECOS
#
# Check whether a given user exists, and create the user as a system
# user if necessary.

check_user() {
  user="$1"
  if ! getent passwd "$user" >/dev/null; then
    adduser --system --disabled-login --gecos "$2" \
      --shell /bin/false "$user" >/dev/null
    echo_log "Created user '$user'"
  fi
}

# check_upgrade
#
# Returns 0 if we're doing an upgrade, 1 if not.

check_upgrade() {
  if [ -f $CONFIG_DIR/we_are_doing_an_upgrade ]; then
    return 0
  fi
  return 1
}

# check_apache_disabled
#
# If the file $CONFIG_DIR/apache_site_disabled exists, return 0 (and
# remove the file), else return 1. (This is weird; the file is created
# by the prerm script but over there it doesn't look like it makes a
# great deal of sense.)

check_apache_disabled() {
  if [ -f $CONFIG_DIR/apache_site_disabled ]; then
    rm -f $CONFIG_DIR/apache_site_disabled
    return 0
  fi
  return 1
}

# create_enc_key FILENAME
#
# Creates a random 768-bit symmetric encryption key and places it in
# FILENAME, which is then made over to LINOTP_USER and read-protected
# from everybody else.  Uses RAND_DEVICE for randomness, which is
# usually /dev/urandom.

create_enc_key() {
  fn="$1"
  echo_log "Generating encryption key: $fn"
  echo_log "This may take a while ..."
  dd if="$RAND_DEVICE" of="$fn" bs=1 count=96
  chown "$LINOTP_USER" "$fn"
  chmod 400 "$fn"
  echo_log "Encryption key generated"
}

# evaluate_answers
#
# Obtains configuration information from debconf and uses that to
# figure out additional configuration settings.

evaluate_answers() {
  db_get linotp/apache/activate
  APACHE=$RET
  echo_log "I got this key: $APACHE"

  if [ "$APACHE" == "true" ]; then
    db_get linotp/apache/admin_password
    if [ "$RET" != "$FAKE_PASSWORD" ]; then
      # Only update the password if it is not the fake password
      PWDIGEST=$(echo -n "admin:$REALM:$RET" | md5sum | cut -f1 -d ' ')
      echo "admin:$REALM:$PWDIGEST" >"$DIGESTFILE"
    fi
    # delete password from database
    db_set linotp/apache/admin_password "$FAKE_PASSWORD"

    db_get linotp/apache/ssl_create
    APACHE_SSL_CREATE=$RET
    db_set linotp/apache/ssl_create false

    echo_log "I got these keys: apache: $APACHE_SSL_CREATE"
  fi

}

# Here's where the actual execution of the postinst file starts.

if [ "$1" = configure ]; then
  # Make sure the LinOTP user exists
  check_user "$LINOTP_USER" "LinOTP Server"

  create_dir "log" "$LOGDIR"
  create_dir "lib" "$LIBDIR"
  create_dir "cache" "$CACHEDIR" clear
  create_dir "template" "$TEMPLATEDIR"

fi

# Allow dbconfig-common to configure the database
dbc_go linotp "$@"

case "$1" in
  configure)

    evaluate_answers

    if [ "$INSTALL_MODE" = "install" -a ! -f "$ENCKEYFILE" ]; then
      create_enc_key "$ENCKEYFILE"
    fi

    if [ "$APACHE" = "true" ]; then
      if ! check_apache_disabled; then
        # Copy virtual host definition for LinOTP to /etc/apache2
        APACHE2_VERSION=$(dpkg -s apache2 | grep "^Version:" | cut -d' ' -f2)
        if [ -z "$APACHE2_VERSION" ]; then
          echo_error "Apache requested but apache2 isn't installed, aborting"
          exit 1
        fi

        echo_log "Setting up for Apache $APACHE2_VERSION"
        if [ ! -f /etc/apache2/sites-available/linotp.conf ]; then
          cp /usr/share/doc/linotp/examples/apache-site.conf /etc/apache2/sites-available/linotp.conf
        else
          echo_log "Apache already configured, leaving intact."
        fi

        a2ensite linotp

        for mod in auth_digest wsgi ssl headers; do
          a2enmod -q $mod
        done

        echo_log "Basic Apache configuration done"
      fi
      if [ "$APACHE_SSL_CREATE" = "true" ]; then
        echo_log "Making self-signed certificate"
        # in appliance install these directories do not exist, yet
        [ -d /etc/ssl/private ] || mkdir -p /etc/ssl/private
        [ -d /etc/ssl/certs ] || mkdir -p /etc/ssl/certs
        openssl req -new -x509 -newkey rsa:2048 \
          -subj /CN=`hostname`.`dnsdomainname` -days 768 \
          -out /etc/ssl/certs/linotpserver.pem \
          -keyout /etc/ssl/private/linotpserver.key \
          -nodes
        echo_log "Self-signed certificate created"
      fi
      invoke-rc.d apache2 reload
      echo_log "done setting up apache with ssl"
    else
      a2dissite linotp || echo_warn "Could not disable Apache linotp host"
    fi

    # TODO: probably not needed
    chown -R "$LINOTP_USER" "$LOGDIR"

    # remove the template cache, as the templates might have changed
    # TODO: probably not needed
    rm -rf "$CACHEDIR"/*

    #
    # create sql Audit trail as default
    #
    OLD_PRIVKEY="$CONFIG_DIR"/private.pem
    OLD_PUBKEY="$CONFIG_DIR"/public.pem
    PRIVKEY="$CONFIG_DIR"/audit-private.pem
    PUBKEY="$CONFIG_DIR"/audit-public.pem

    if [ ! -f "$PRIVKEY" ];  then
      if [ -f "$OLD_PRIVKEY" ]; then
	# We have an old key pair that should be moved, lest people
	# lose access to their existing audit log.
	echo_log "Moving $OLD_PRIVKEY to $PRIVKEY"
	mv "$OLD_PRIVKEY" "$PRIVKEY"
	rm -f "$OLD_PUBKEY"	# no longer required
      else
	echo_log "Creating private/public key pair for audit log"
	openssl genrsa -out "$PRIVKEY" 2048
      fi
      # Extract the public key from the private key. We do this even
      # when we have copied an old private key, to be very sure that
      # the public key matches the private key.
      openssl rsa -in "$PRIVKEY" -pubout -out "$PUBKEY"
      # Fix ownership and permissions
      chmod 600 "$PRIVKEY"
      chown "$LINOTP_USER" "$PRIVKEY"
    fi

    rm -f $CONFIG_DIR/we_are_doing_an_upgrade
  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
  ;;

  *)
    echo "postinst called with unknown argument \`$1'" >&2
    exit 1
  ;;
esac

#DEBHELPER#
