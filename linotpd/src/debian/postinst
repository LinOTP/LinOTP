#!/bin/bash

set -e

. /usr/share/debconf/confmodule

NEW_VERSION='@@@DEB_VERSION@@@'

APACHE_CONFIG=/etc/linotp2/apache-servername.conf
LINOTP_INI=/etc/linotp2/linotp.ini
WHO_INI=/etc/linotp2/who.ini
ENCKEYFILE=/etc/linotp2/encKey
REALM="LinOTP2 admin area"
DIGESTFILE=/etc/linotp2/admins
LOGDIR=/var/log/linotp
CACHEDIR=/etc/linotp2/data
TEMPLATEDIR=/etc/linotp2/custom-templates
DBFILE='\/%(here)s\/token.db'
DBFILE_FS=/etc/linotp2/token.db
RAND_DEVICE=/dev/urandom
FAKE_PASSWORD=This_is_not_the_real_password_we_just_do_not_want_to_be_asked_again_in_case_of_updating_the_package
LSB_RELEASE=`which lsb_release || true`

LINOTP_USER=linotp

msg="LinOTP2: "

echo_prio() {
    t=$(date +"%Y/%m/%d - %T")
    echo >&2 "$t $1 [linotp postinst] $2"
}
echo_info() {
    echo_prio INFO "$1"
}
echo_warn() {
    echo_prio WARNING "$1"
}
echo_error() {
    echo_prio ERROR "$1"
}
echo_log() {
    echo >&2 "${msg}$1"
}

# Try to figure out what we are supposed to do

INSTALL_ACTION=install
if [ -n "$2" ]; then
    INSTALLED_VERSION="$2"
    if dpkg --compare-versions "${NEW_VERSION}" eq "${INSTALLED_VERSION}"; then
	INSTALL_ACTION=reinstall
    elif dpkg --compare-versions "${NEW_VERSION}" gt "${INSTALLED_VERSION}"; then
	INSTALL_ACTION=upgrade
    else
	INSTALL_ACTION=downgrade
    fi
fi

# Currently debconf's postinst script does not use the 'reconfigure' parameter
# but instead sets DEBCONF_RECONFIGURE to 1. The recommended method for dealing
# with this and being future-proof is to support both. See debconf-devel manpage
# for details.

INSTALL_MODE="install"
if [ "$1" = "reconfigure" -o "$DEBCONF_RECONFIGURE" = "1" ]; then
    INSTALL_MODE="reconfigure"
elif [ "$1" = "configure" -a -n "$INSTALLED_VERSION" ]; then
    INSTALL_MODE="reinstall"
fi

echo_info "Installation mode: $INSTALL_MODE"
echo_info "Installed version: ${INSTALLED_VERSION:-(none)}"
echo_info "New version: $NEW_VERSION"
echo_info "Installation action: $INSTALL_ACTION"

#####################
# Utility functions #
#####################

# create_dir MESSAGE NAME [clear]
#
# Checks if a directory exists. If it doesn't, creates it and gives it
# to the $LINOTP_USER user. If the directory already exists and the
# word "clear" is passed as the third parameter, empty the directory
# of all files and subdirectories. The first parameter is an
# explanatory string used in log messages.

create_dir() {
    dirmsg="$1"
    dirname="$2"
    if [ ! -d "$dirname" ]; then
	mkdir -p "$dirname"
	chown -R "$LINOTP_USER" "$dirname"
	echo_log "Created $dirmsg directory: $dirname"
    else
	echo_log "Using existing $dirmsg directory: $dirname"
	if [ "$3" == "clear" ]; then
	    echo_log "Clearing $dirname"
	    rm -rf "$dirname"/*
	fi
    fi
}

# check_user USERNAME GECOS
#
# Check whether a given user exists, and create the user as a system
# user if necessary.

check_user() {
    user="$1"
    if ! getent passwd "$user" >/dev/null; then
	adduser --system --disabled-login --gecos "$2" \
		--shell /bin/false "$user" >/dev/null
	echo_log "Created user '$user'"
    fi
}

# check_upgrade
#
# Returns 0 if we're doing an upgrade, 1 if not.

check_upgrade() {
    if [ -f /etc/linotp2/we_are_doing_an_upgrade ]; then
	return 0
    fi
    return 1
}

# check_sva3
#
# Returns 1 if we're on the SVA3, 0 if not.

check_sva3() {
    if grep -q SVA3 /etc/issue; then
	return 0
    fi
    return 1
}

# check_apache_disabled
#
# If the file /etc/linotp2/apache_site_disabled exists, return 0 (and
# remove the file), else return 1. (This is weird; the file is created
# by the prerm script but over there it doesn't look like it makes a
# great deal of sense.)

check_apache_disabled() {
    if [ -f /etc/linotp2/apache_site_disabled ]; then
	rm -f /etc/linotp2/apache_site_disabled
	return 0
    fi
    return 1
}

# configure_sql
#
# This incorporates previously-determined SQL configuration
# information into the LINOTP_INI file.

configure_sql() {
    if [ "$DBPASSWORD1" = "" -o "$DBPASSWORD1" = "1234" ]; then
	echo_log "SQL user password empty or known - not changing linotp.ini"
    else
	sed -i -e "s/^sqlalchemy.url.*/${SQLALCHEMY}/" $LINOTP_INI
	if [ "$APPLIANCE_INSTALL" = "true" ]; then
	    sed -i -e "s/^#\?linotpAudit.sql.url \?=.*/${SQLAUDIT}/" $LINOTP_INI
	fi
	echo_log "SQL configuration in $LINOTP_INI changed."
    fi
}

# create_tables
#
# Use paster to try to create the SQL database tables.

create_tables() {
    echo_log "Trying to create tables"
    paster setup-app $LINOTP_INI || true
}

# create_grant_strings
#
# Assemble SQL commands that will set up database permissions for
# LinOTP. This should work for MySQL, anyway. It does something that
# one should never do, namely interpolate arbitrary strings into
# SQL command templates (see https://xkcd.com/327/), but we may get
# away with this because the strings are from debconf and system
# administrators will hopefully be reluctant to exploit themselves.

create_grant_strings() {
    # Create the grant string for all hosts
    GRANT_STRING1="GRANT ALL PRIVILEGES ON ${DBNAME}.* TO '${DBUSER}'@'%' IDENTIFIED BY '${DBPASSWORD1}';"
    # Create the grant string for localhost
    GRANT_STRING2="GRANT ALL PRIVILEGES ON ${DBNAME}.* TO '${DBUSER}'@'localhost' IDENTIFIED BY '${DBPASSWORD1}';"
}

# create_enc_key FILENAME
#
# Creates a random 768-bit symmetric encryption key and places it in
# FILENAME, which is then made over to LINOTP_USER and read-protected
# from everybody else.  Uses RAND_DEVICE for randomness, which is
# usually /dev/urandom.

create_enc_key() {
    fn="$1"
    echo_log "Generating encryption key: $fn"
    echo_log "This may take a while ..."
    dd if="$RAND_DEVICE" of="$fn" bs=1 count=96
    chown "$LINOTP_USER" "$fn"
    chmod 400 "$fn"
    echo_log "Encryption key generated"
}

# evaluate_answers
#
# Obtains configuration information from debconf and uses that to
# figure out additional configuration settings.

evaluate_answers() {
    db_get linotp/appliance || true
    APPLIANCE_INSTALL=$RET

    db_get linotp/apache/activate
    APACHE=$RET
    echo_log "I got this key: $APACHE"

    if [ "$APACHE" == "true" ]; then
	db_get linotp/apache/admin_password
	if [ "$RET" != "$FAKE_PASSWORD" ]; then
	    # Only update the password if it is not the fake password
	    PWDIGEST=$(echo -n "admin:$REALM:$RET" | md5sum | cut -f1 -d ' ')
	    echo "admin:$REALM:$PWDIGEST" >"$DIGESTFILE"
	fi
	# delete password from database
	db_set linotp/apache/admin_password "$FAKE_PASSWORD"

	db_get linotp/apache/ssl_create
	APACHE_SSL_CREATE=$RET
	db_set linotp/apache/ssl_create false

	db_get linotp/tokendb/dbtype_apache2
	TOKENDB=$RET
	echo_log "I got these keys: apache: $APACHE_SSL_CREATE, tokendb: $TOKENDB"
    else
	db_get linotp/tokendb/dbtype
	TOKENDB=$RET
    fi

    echo_log "This is my database: $TOKENDB"

    case "$TOKENDB" in
	SQLite)
	    DBFILE='\/%(here)s/token.db'
	    DBFILE_FS=/etc/linotp2/token.db
	    db_get linotp/sqlite/ask_createdb || true
	    CREATEDB_SQLITE=$RET
	    ;;
	MySQL)
	    db_get linotp/tokendb/dbhost
	    DBHOST=$RET
	    db_get linotp/tokendb/dbname
	    DBNAME=$RET
	    db_get linotp/tokendb/dbuser
	    DBUSER=$RET
	    db_get linotp/tokendb/randompw || true
	    RANDOMPW=$RET
	    if [ "$RANDOMPW" = "true" ]; then
		DBPASSWORD1="$(pwgen 16 1)"
		db_set linotp/tokendb/randompw false
	    else
		db_get linotp/tokendb/password
		DBPASSWORD1="$RET"
	    fi
	    db_get linotp/mysql/ask_createdb || true
	    CREATEDB=$RET
	    # As we also delete the root password from the debconf DB,
	    # we cannot create the database in subsequent runs.
	    db_set linotp/mysql/ask_createdb false
	    if [ "$CREATEDB" = "true" ]; then
		db_get linotp/mysql/ask_rootpw
		ROOTPW=$RET
		db_set linotp/mysql/ask_rootpw false
	    fi
	    db_get linotp/mysql/ask_createtables || true
	    CREATE_TABLES=$RET
	    db_set linotp/mysql/ask_createtables false
	    ;;
	*)
	    echo_log "'$TOKENDB' is not supported for the token database"
	    ;;
    esac
}

# Here's where the actual execution of the postinst file starts.

case "$1" in
    configure)

	# Initialize linotp.ini
	if ! [ -f "$LINOTP_INI" ]; then
	    cp /etc/linotp2/linotp.ini.example "$LINOTP_INI"
	fi

	# Make sure the LinOTP user exists
	check_user "$LINOTP_USER" "LinOTP Server"

	create_dir "log" "$LOGDIR"
	create_dir "cache" "$CACHEDIR" clear
	create_dir "template" "$TEMPLATEDIR"

	SVA3_INSTALL=0

	if check_sva3; then
	    echo_log "Doing installation for SVA3"
	    SVA3_INSTALL=1
	    # The debconf answers can simply be preseeded elsewhere in the SVA3
	    # so we can pick them up here as if they had been entered interactively
	    evaluate_answers
	else
	    echo_log "Doing standard installation"
	    evaluate_answers
	    echo_log "done asking questions...."
	fi

	if [ "$INSTALL_MODE" = "install" -a ! -f "$ENCKEYFILE" ]; then
	    create_enc_key "$ENCKEYFILE"
	fi

	if [ "$SVA3_INSTALL" = "1" ]; then
	    echo_log "Skipping Apache configuration because we're on an SVA3."
	elif [ "$APACHE" = "true" ]; then
	    if ! check_apache_disabled; then
		# Copy virtual host definition for LinOTP to /etc/apache2,
		# depending on the Apache version.
		APACHE2_VERSION=$(dpkg -s apache2 | grep "^Version:" | cut -d' ' -f2)
		if [ -z "$APACHE2_VERSION" ]; then
		    echo_error "Apache requested but apache2 isn't installed, aborting"
		    exit 1
		fi
		if dpkg --compare-versions "${APACHE2_VERSION}" ge 2.4; then
		    config=/etc/linotp2/apache2.4-example/linotp2.conf
		else
		    config=/etc/linotp2/apache2.2-example/linotp2.conf
		fi
		echo_log "Setting up for Apache $APACHE2_VERSION"
		if [ ! -f /etc/apache2/sites-available/linotp2.conf ]; then
		    echo_log "Using configuration file: $config"
		    cp "$config" /etc/apache2/sites-available/linotp2.conf
		else
		    echo_log "Apache already configured, leaving intact."
		fi

		a2ensite linotp2
		for mod in auth_digest wsgi ssl headers; do
		    a2enmod -q $mod
		done
		echo_log "Basic Apache configuration done"
	    fi
	    if [ "$APACHE_SSL_CREATE" = "true" ]; then
		echo_log "Making self-signed certificate"
		# in appliance install these directories do not exist, yet
		[ -d /etc/ssl/private ] || mkdir -p /etc/ssl/private
		[ -d /etc/ssl/certs ] || mkdir -p /etc/ssl/certs
		openssl req -new -x509 -newkey rsa:2048 \
			-subj /CN=`hostname`.`dnsdomainname` -days 768 \
			-out /etc/ssl/certs/linotpserver.pem \
			-keyout /etc/ssl/private/linotpserver.key \
			-nodes
		echo_log "Self-signed certificate created"
	    fi
	    touch $APACHE_CONFIG
	    invoke-rc.d apache2 reload
	    echo_log "done setting up apache with ssl"
	else
	    a2dissite linotp2 || echo_warn "Could not disable Apache linotp2 host"
	fi

	########################################################################
	#
	# Check and create token databases
	#
	# ...if we are within the appliance, we cannot create the database, since
	# the mysql is not running.
	# so we need to do the mysql creating in firstboot!

	case "$TOKENDB" in
	    MySQL)
		echo_log "Setting up MySQL ..."
		SQLALCHEMY="sqlalchemy.url = mysql:\/\/$DBUSER:$DBPASSWORD1@$DBHOST\/$DBNAME"
		SQLAUDIT="linotpAudit.sql.url = mysql:\/\/$DBUSER:$DBPASSWORD1@$DBHOST\/$DBNAME"
		configure_sql
		# The SVA3 configuration process will overwrite this.
		if [ "$CREATEDB" = "true" ]; then
		    if [ "$ROOTPW" = "" -a -f /etc/lseappliance/mysql_root ]; then
			ROOTPW=`cat /etc/lseappliance/mysql_root`
		    fi

		    create_grant_strings
		    INSTALLED=`dpkg -l linotp 2>&1 | grep ^ii | wc -l`
		    echo_log "The result of dpkg -l linotp: $INSTALLED"

		    if [ "$SVA3_INSTALL" = "1" ]; then
			# The database is generated in the appmgr-mod-linotp postinst.
			true
		    # ATM, we will create the database on the first run, which might fail.
		    # On an old appliance, we only create the database on reboot.
		    elif [ "$APPLIANCE_INSTALL" = "true" -a ! -f /etc/lseappliance/mysql_root ]; then
			# The package is not installed, so we will create the database
			# after next reboot
			echo_info "Will setup the database after next reboot"
			echo "$GRANT_STRING1" > /etc/linotp2/linotpcreatedb.sql
			echo "$GRANT_STRING2" >> /etc/linotp2/linotpcreatedb.sql
			cp /etc/rc.local /etc/rc.local.linotp-dpkg
			echo "#!/bin/sh -e" > /etc/rc.local

			# In Debian Jessie, a MySQL systemd service file does not exist.
			# Therefore, we cannot ensure that the rc.local script is
			# executed after MySQL is successfully started. That's why we
			# poll for MySQL.
			DEBIAN_VERSION=`cat /etc/debian_version`
			dpkg --compare-versions "${DEBIAN_VERSION}" ge 8.0
			DEB_VER_GE_8=$?
			dpkg --compare-versions "${DEBIAN_VERSION}" lt 9.0
			DEB_VER_LT_9=$?
			if [ ${DEB_VER_GE_8} == 0 -a ${DEB_VER_LT_9} == 0 ]; then
			    echo "while ! mysqladmin ping --host=$DBHOST --user=root --password=${ROOTPW}; do" >> /etc/rc.local
			    echo "echo \"MySQL is not running, yet. Waiting...\"" >> /etc/rc.local
			    echo "sleep 1" >> /etc/rc.local
			    echo "done" >> /etc/rc.local
			elif [ ${DEB_VER_LT_9} != 0 ]; then
			    # This should really be covered by the SVA3 case above.
			    echo_err "TODO: Check MySQL and systemd on debian 9 appliance install!"
			fi

			echo "mysql --host=$DBHOST --user=root --password=\"${ROOTPW}\" --execute=\"create database $DBNAME default character set 'utf8' default collate 'utf8_general_ci';\" || true" >> /etc/rc.local
			echo "mysql --host=$DBHOST --user=root --password=\"${ROOTPW}\" < /etc/linotp2/linotpcreatedb.sql || true" >> /etc/rc.local
			echo "rm /etc/linotp2/linotpcreatedb.sql" >> /etc/rc.local
			# create tables
			echo "paster setup-app $LINOTP_INI" >> /etc/rc.local
			echo "chown -R \"$LINOTP_USER\" $LOGDIR/*" >> /etc/rc.local
			echo "chown \"$LINOTP_USER\" $ENCKEYFILE" >> /etc/rc.local
			# Finally we would clean the rc.local
			echo "mv /etc/rc.local.linotp-dpkg /etc/rc.local" >> /etc/rc.local
			#echo "echo '#!/bin/sh -e' > /etc/rc.local" >> /etc/rc.local
			#echo "echo 'exit 0'>> /etc/rc.local" >> /etc/rc.local
			echo_log "written this rc.local:"
			cat /etc/rc.local
		    else
			# We can try to create the database now!
			echo_log "Try to set up database, now"
			mysql --host=$DBHOST --user=root --password="${ROOTPW}" --execute="create database if not exists $DBNAME default character set 'utf8' default collate 'utf8_general_ci';" || true
			temp_sql=`mktemp`
			# set password
			if [ "$DBPASSWORD1" != "" -a "$DBPASSWORD1" != "1234" ]; then
			    echo $GRANT_STRING1 > $temp_sql
			    echo $GRANT_STRING2 >> $temp_sql
			    mysql --host=$DBHOST --user=root --password="${ROOTPW}" < $temp_sql || true
			    rm $temp_sql
			fi
		    fi #APPLIANCE_INSTALL
		fi #CREATE_DB

		if [ "$SVA3_INSTALL" = "1" ]; then
		    # LinOTP will create its tables when it actually runs.
		    true
		elif [ "$CREATE_TABLES" = "true" -a "$APPLIANCE_INSTALL" != "true" ]; then
		    # we create the database tables if not an appliance
		    create_tables
		fi
		# On an Appliance we create the tables in case of an upgrade!
		if [ "$APPLIANCE_INSTALL" = "true" ] ; then
		    if check_upgrade; then
			echo_log "Doing an upgrade, creating tables"
			create_tables
		    fi
		fi
		;;
	    SQLite)
		echo_log "Setting up SQLite ..."
		SQLALCHEMY="sqlalchemy.url = sqlite:\/\/$DBFILE"
		SQLAUDIT="linotpAudit.sql.url = sqlite:\/\/$DBFILE"
		configure_sql
		if [ "$CREATEDB_SQLITE" = "true" ]; then
		    if [ -f $DBFILE_FS ]; then
			mv $DBFILE_FS $DBFILE_FS.old
		    fi
		    create_tables
		fi
		create_dir "SQLite" /var/run/linotp
		chown "$LINOTP_USER" /etc/linotp2
		chown "$LINOTP_USER" /etc/linotp2/token.db
	esac #TOKENDB

	# TODO: probably not needed
	chown -R "$LINOTP_USER" "$LOGDIR"

	# adapt who.ini
	sed -ie "s/^secret\ =\ .*/secret\ =\ $(pwgen 16 1)/" "$WHO_INI"
	chown "$LINOTP_USER" "$WHO_INI"
	chmod 600 "$WHO_INI"

	# remove the template cache, as the templates might have changed
	# TODO: probably not needed
	rm -rf "$CACHEDIR"/*

	#
	# create sql Audit trail as default
	#
	PRIVKEY=/etc/linotp2/private.pem
	PUBKEY=/etc/linotp2/public.pem

	if [ ! -f "$PRIVKEY" ];  then
	    echo_log "Creating private/public key pair"
	    # create keypair:
	    openssl genrsa -out "$PRIVKEY" 2048
	    # extract the public key:
	    openssl rsa -in "$PRIVKEY" -pubout -out "$PUBKEY"
	    chmod 600 "$PRIVKEY"
	fi
	chown "$LINOTP_USER" "$PRIVKEY"

	#
	# Finally, if we are in the appliance, we activate the Mysql Audit.
	# We can only do this at the end, otherwise the creation of the database might
	# fail...
	#
	if [ "$APPLIANCE_INSTALL" = "true" ]; then
	    echo_log "Appliance install, activating mysql audit"
	    sed -ie s/"^#linotpAudit.type = linotp.lib.audit.SQLAudit"/"linotpAudit.type = linotp.lib.audit.SQLAudit"/ $LINOTP_INI
	else
	    echo_log "SQLAudit has not been activated."
	fi

	rm -f /etc/linotp2/we_are_doing_an_upgrade
	;;

    abort-upgrade|abort-remove|abort-deconfigure)
	;;

    *)
	echo "postinst called with unknown argument \`$1'" >&2
	exit 1
	;;
esac

#DEBHELPER#
