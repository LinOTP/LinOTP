#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#    LinOTP - the open source solution for two factor authentication
#    Copyright (C) 2020 arxes-Tolina
#
#    This file is part of LinOTP server.
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU Affero General Public
#    License, version 3, as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the
#               GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    E-mail: linotp@keyidentity.com
#    Contact: www.linotp.org
#    Support: www.keyidentity.com
#
"""
Import existing settings in a format that can be understood by dbconfig-common

  /usr/sbin/dbconfig-load-include -a -f exec <filename>
"""

from configparser import ConfigParser
from pathlib import Path
from typing import Dict
from urllib.parse import urlsplit


def read_config(filename: str):
    ini_file = Path(filename)
    if not ini_file.exists():
        raise Exception("not found")
    defaults = {"here": str(ini_file.parent)}
    config = ConfigParser(defaults)
    config.read([ini_file])

    return config


def sqlalchemy_to_dbc(uri: str):
    db = urlsplit(uri)
    if db.scheme.startswith("mysql"):
        return dict(
            dbuser=db.username,
            dbpass=db.password,
            # basepath=,
            dbname=db.path.strip("/"),
            dbserver=db.hostname,
            dbport=db.port or 3306,
            dbtype="mysql",
        )


def output_vars(dbvars: Dict):
    for (key, value) in dbvars.items():
        print(f"dbc_{key}='{value}'")

if __name__ == "__main__":
    settings = read_config("/etc/linotp/linotp.ini")
    sqluri = settings["app:main"]["sqlalchemy.url"]
    output_vars(sqlalchemy_to_dbc(sqluri))

