#
#    LinOTP - the open source solution for two factor authentication
#    Copyright (C) 2010 - 2018 KeyIdentity GmbH
#
#    This file is part of LinOTP server.
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU Affero General Public
#    License, version 3, as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the
#               GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    E-mail: linotp@keyidentity.com
#    Contact: www.linotp.org
#    Support: www.keyidentity.com
#

#
# LinOTP - Pylons development environment configuration
#
# Remark:
# the %(here)s variable will be replaced with the parent directory of this file
#

##############################################################################
## Paster Configuration:
## ---------------------
[server:main]
use = egg:Paste#http
## define the host ip and port, where the paster process should listen
## 0.0.0.0 stands for any ip on the host
host = 0.0.0.0
port = 5001

## usage of ssl certificates within paster
#ssl_pem = *



##############################################################################
## LinOTP Configuration:
## ---------------------
## in the following section you can define the LinOTP process parameters
[DEFAULT]
debug = false
profile = false
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost


## Audit Log:
## ---------
## Audit log capability will log all requests in a non repudiable way in a
## audit log database. To switch the audit capability on uncomment the
## linotpAudit.type, which should point to your audit log class
#linotpAudit.type = linotp.lib.audit.SQLAudit
#linotpAudit.sql.url = mysql://linotp2:1234@localhost/LinOTP2

linotpAudit.key.private = %(here)s/private.pem
linotpAudit.key.public = %(here)s/public.pem

## define the max amount of audit log entries in the log database
## - one SQL audit entry might take up about 1K of space
linotpAudit.sql.highwatermark = 10000
linotpAudit.sql.lowwatermark = 5000


## Audit table and column definition:
## ----------------------------------
## some databases don't support the used table or column names
## to prevent collission the following table and column prefix
## can be defined
#linotpAudit.sql.table_prefix = lino


## Audit Data truncation:
## ----------------------
## Some databases (eg. MySQL) silently truncate data if the data is longer that
## the VARCHAR column definition. To prevent this silent truncation an error
## can be raised.
## Other databases (e.g. Oracle, PostgreSQL) raise an exception (if the data
## length exceeds the field length).
## Basically we make sure all DBs behave the same way. If error_on_truncation is
## set to True, an Exception is raised. If error_on_truncation is False (default)
## then the  data is silently truncated.
##
## Caution: Setting this parameter to True might make your system unusable!
##
# linotpAudit.error_on_truncation = True


## Unicode Token Database:
## -----------------------
## to support token dbs with limited support for unicode the linotp.uencode_data
## switch can be set to true. This will transparently store unicode data in the
## token info in uencoded format in the database
# linotp.uencode_data = True

## Default LinOTP Token configuration:
## -----------------------------------

linotp.DefaultSyncWindow = 1000
linotp.DefaultOtpLen = 6
linotp.DefaultCountWindow = 50
linotp.DefaultMaxFailCount = 15
linotp.FailCounterIncOnFalsePin = True
linotp.PrependPin = True
linotp.DefaultResetFailCount = True
linotp.splitAtSign = True

linotpGetotp.active = False

## Encrytion key:
## --------------
## The encryption key is used to encrypt the token seeds before storing them
## in the Token database.
##
## Caution: Be careful with this key - losing it, will render your token and
## LinOTP configuration useless
linotpSecretFile = %(here)s/encKey


## RADIUS Token:
## -------------
## These are the settings for the RADIUS Token:
## radius.dictfile, the RADIUS dictionary file which contains the mapping of
## radius attributes names to ids
radius.dictfile= %(here)s/dictionary

## radius.nas_identifier - the NAS Identifier of your LinOTP server
## which is sent to the RADIUS server
radius.nas_identifier = LinOTP



##############################################################################
## LinOTP Server Configuration:
## ----------------------------
## LinOTP runs in the scope of the pylons framework, which
## can be adjusted in various aspects. To change these parameters please check
## the pylons or beaker configuration
[app:main]
use = egg:LinOTP

# enable or disable services
#service.manage = True
#service.selfservice = True
#service.validate = True
#service.u2f = True
#service.openid = False
#service.ocra = False
#linotpGetotp.active = False

alembic.ini = %(here)s/alembic.ini
#alembic.writeback = True
#alembic.auto_update = False


## define location of the LinOTP Token Database
sqlalchemy.url = mysql://linotp2:1234@localhost/LinOTP2

sqlalchemy.pool_recycle = 3600

who.config_file = %(here)s/who.ini
who.log_level = warning
who.log_file = /var/log/linotp/linotp.log
#who.generate_random_secret = true


full_stack = true
static_files = true


cache_dir = %(here)s/data
custom_templates = %(here)s/custom-templates/

## Beaker Configuration

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions

#beaker.session.key = linotp
#beaker.session.secret = somesecret


##############################################################################
## Logging Configuration:
## ----------------------
## Note: For more detailed log messages change the level to INFO or DEBUG
##


## Logger configuration
## - define which modules should be logged
[loggers]
keys = root

## root module logging definition:
[logger_root]
level = WARN
handlers = file

[handlers]
keys = file

[handler_file]
class = handlers.RotatingFileHandler
# Make the logfiles 10 MB
# and rotate 4  files
args = ('/var/log/linotp/linotp.log','a', 10000000, 4)
level = WARN
formatter = generic

## Logging via logstash
## This is an example using the python-logstash logging library.
## If you wish to use this example, you also need to add
## logstash to handlers.keys, and add the logstash handler to
## the individual logger_* section
#[handler_logstash]
## Logging class to use
#class = logstash.UDPLogstashHandler
## Arguments as accepted by the logstash library. For more details
## see the output of 'pydoc logstash.UDPLogstashHandler'
##   ('hostname', port,  message_type, ('tag', 'tag', ...), fqdn, version)
#args = ('logstashhost', 5000, 'linotp', ('example1'), False, 1)

[formatters]
keys = generic

[formatter_generic]
## To secure your log output and prevent command escaping use the
## logger class definition linotp.lib.log.SecureFormatter by uncommenting the
## line below
##
## Caution: The SecureFormatter will only work with python >= 2.7
##
#class = linotp.lib.log.SecureFormatter
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(funcName)s #%(lineno)d] %(message)s
datefmt = %Y/%m/%d - %H:%M:%S



