#
# WARNING: This is a generated file, generated from:
#    {{.Env.LINOTP_INI_TEMPLATE}}
# Any changes made to the generated file will be overwritten.
#
#    LinOTP - the open source solution for two factor authentication
#    Copyright (C) 2016 - 2018 KeyIdentity GmbH
#
#    This file is part of LinOTP server.
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU Affero General Public
#    License, version 3, as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the
#               GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    E-mail: linotp@keyidentity.com
#    Contact: www.linotp.org
#    Support: www.keyidentity.com
#
{{/*
#
# LinOTP - Docker container configuration template 
#
# linotp.ini is generated from this file by dockerfy on container startup
# This file is in Go template syntax.
*/}}

##############################################################################
## Paster Configuration:
## ---------------------
[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 5001

##############################################################################
## LinOTP Configuration:
## ---------------------
[DEFAULT]
debug = false
profile = false
smtp_server = localhost
error_email_from = paste@localhost

## Audit Log:
## ---------
## Audit log capability will log all requests in a non repudiable way in a
## audit log database. To switch the audit capability on uncomment the
## linotpAudit.type, which should point to your audit log class
linotpAudit.type = linotp.lib.audit.SQLAudit
{{ if eq .Env.LINOTP_DB_TYPE "sqlite" }}
linotpAudit.sql.url = {{ printf "%s://%s" .Env.LINOTP_DB_TYPE .Env.LINOTP_DB_NAME }}
{{ else }}
linotpAudit.sql.url = {{ printf "%s://%s:%s@%s:%s/%s" .Env.LINOTP_DB_TYPE .Env.LINOTP_DB_USER .Env.LINOTP_DB_PASSWORD .Env.LINOTP_DB_HOST .Env.LINOTP_DB_PORT .Env.LINOTP_DB_NAME}}
{{ end }}

linotpAudit.key.private = %(here)s/private.pem
linotpAudit.key.public = %(here)s/public.pem

## define the max amount of audit log entries in the log database
## - one SQL audit entry might take up about 1K of space
linotpAudit.sql.highwatermark = 10000
linotpAudit.sql.lowwatermark = 5000

## Default LinOTP Token configuration:
## -----------------------------------

linotp.DefaultSyncWindow = 1000
linotp.DefaultOtpLen = 6
linotp.DefaultCountWindow = 50
linotp.DefaultMaxFailCount = 15
linotp.FailCounterIncOnFalsePin = True
linotp.PrependPin = True
linotp.DefaultResetFailCount = True
linotp.splitAtSign = True

linotpGetotp.active = False

## Encrytion key:
{{ if .Env.SECRET_FILE_LOCATION }}
linotpSecretFile = {{ .Env.SECRET_FILE_LOCATION }}
{{ else }}
linotpSecretFile = %(here)s/encKey
{{ end }}

## RADIUS Token:
radius.dictfile= %(here)s/dictionary
radius.nas_identifier = LinOTP

##############################################################################
## LinOTP Server Configuration:
[app:main]
use = egg:LinOTP

alembic.ini = %(here)s/alembic.ini

## define location of the LinOTP Token Database
{{ if eq .Env.LINOTP_DB_TYPE "sqlite" }}
sqlalchemy.url = {{ printf "%s://%s" .Env.LINOTP_DB_TYPE .Env.LINOTP_DB_NAME }}
{{ else }}
sqlalchemy.url = {{ printf "%s://%s:%s@%s:%s/%s" .Env.LINOTP_DB_TYPE .Env.LINOTP_DB_USER .Env.LINOTP_DB_PASSWORD .Env.LINOTP_DB_HOST .Env.LINOTP_DB_PORT .Env.LINOTP_DB_NAME}}
{{ end }}

sqlalchemy.pool_recycle = 3600

who.config_file = %(here)s/who.ini
who.log_level = warning
who.log_file = /var/log/linotp/linotp.log

full_stack = true
static_files = true

cache_dir = %(here)s/data
custom_templates = %(here)s/custom-templates/

##############################################################################
## Logging Configuration:

## Logger configuration
## - define which modules should be logged
[loggers]
keys = root, linotp, sqlalchemy

## root module logging definition:
[logger_root]
level = {{ default .Env.LINOTP_LOGLEVEL "INFO" }}
{{ if .Env.LOGSTASH_HOST }}
handlers = console, logstash
{{ else }}
handlers = console
{{ end }}

## linotp module logging definition:
[logger_linotp]
level = {{ default .Env.LINOTP_LOGLEVEL "INFO" }}
handlers =
qualname = linotp

[logger_sqlalchemy]
level = {{ default .Env.SQLALCHEMY_LOGLEVEL "ERROR" }}
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handlers]
{{ if .Env.LOGSTASH_HOST }}
keys = console, logstash
{{ else }}
keys = console
{{ end }}

[handler_console]
class = StreamHandler
args = (sys.stdout,)
level = {{ default .Env.LINOTP_CONSOLE_LOGLEVEL "DEBUG" }}
formatter = generic

{{ if .Env.LOGSTASH_HOST }}
[handler_logstash]
class = logstash.UDPLogstashHandler
level = INFO
args = ('{{ .Env.LOGSTASH_HOST }}', {{ .Env.LOGSTASH_PORT }}, 'linotp', {{ .Env.LOGSTASH_TAGS }}, False, 1)
{{ end }}


[formatters]
keys = generic

[formatter_generic]
## To secure your log output and prevent command escaping use the
## logger class definition linotp.lib.log.SecureFormatter by uncommenting the
## line below
##
## Caution: The SecureFormatter will only work with python >= 2.7
##
#class = linotp.lib.log.SecureFormatter
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(funcName)s #%(lineno)d] %(message)s
datefmt = %Y/%m/%d - %H:%M:%S
