#!/bin/bash
#
# LinOTP - the Open Source solution for multi-factor authentication
#
# Coypright Â© 2020- arxes-tolina GmbH
#
# Shell script based installation / upgrade / configuration tests
#

show_help() {
    echo
    echo "$0 TEST"
    echo
    echo " install2       Purge, install v2, selenium test"
    echo " install3       Purge, install v3"
    echo " upgrade2to3    Purge, install v2, upgrade to v3"
    echo " install3psql   Purge, install using postgres database"
    echo
    echo " upgrade3       Upgrade currently installed package to v3"
    echo " 3reinstall     Install v3 then reinstall v3"
    echo " remove         Remove installed package"
    echo
    echo " selenium_check Selenium test currently installed package"
    echo " mysql_password Check v3 install with password containing spaces"
    echo " htpasswd       Check admin password can be changed"
    echo " noapache       Install / reconfigure with apache disabled"
    echo
    echo " alltests       Run all available tests"
    echo " help           Show this help message"
    echo
}

# Exit on errors, unset variables or pipeline errors
set -euo pipefail


# Load environment from .env file
toolsdir="$(cd $(dirname $0); pwd)"

: "${DOTENVFILE=".env"}"
if [ -f "$DOTENVFILE" ]; then
  source "$DOTENVFILE"
else
  echo "Using default settings. To customise for your environment, copy"
  echo "the file env.template to .env and edit for your local configuration"
fi

####
# Default settings that can be overriden from .env file or environment
####
# Sources directory
: "${linotp_project:="$(realpath "$toolsdir"/../../../../..)"}"

# config file for integration tests
: "${integration_ini="$(realpath ../integration/server_local.ini)"}"

# Command to gain root
: "${sudo="sudo --preserve-env=DEBIAN_FRONTEND,DEBIAN_PRIORITY"}"

# Pytest for running tests
: "${pytest="pytest"}"

# Integration test suite
: "${integration_suite="smoketest"}"
####

# LinOTP 2 package to download and install
linotp2_deb_url="http://www.linotp.org/apt/debian/dists/buster/linotp/all/linotp_2.11.2-1~bpo10+1_all.deb"

linotpsrc=$linotp_project/linotpd/src

# Use line based debconf frontend if any missing questions
# are encountered
export DEBIAN_FRONTEND=readline

# This is a flag to indicate if any non fatal errors were
# detected during the process
have_errors=

error() {
    # Show error message but do not exit immediately
    echo "======================"
    >&2 echo "TEST ERROR: $@"
    echo "======================"
    have_errors=1
}

fatal() {
    # Show error message and exit
    echo "======================"
    >&2 echo "FATAL TEST ERROR: $@"
    echo "======================"
    exit 1
}

cfgfail() {
    # Error in configuration file
    echo "--- linotp.cfg --"
    $sudo cat /etc/linotp/linotp.cfg /etc/linotp/conf.d/*.cfg
    echo "-----------------"
    echo
    echo "======================"
    >&2 echo "TEST CONFIGURATION ERROR: $@"
    echo "======================"
    exit 1
}

logtest() {
    echo
    echo "======================"
    echo "TEST: $@"
    echo "======================"
}

installed_linotp_ver() {
    # echo 2 or 3, depending on installed version.
    # The cutoff is actually 2.80
    if dpkg --compare-versions `dpkg-query -Wf '${Version}' linotp` ge "2.80"; then
        echo 3
    else
        echo 2
    fi
}

# ---------------------
# Database functions

db_uri() {
    if [ "$(installed_linotp_ver)" = 3 ]; then
        # Get linotp connection uri from configuration file (linotp 3 only)
        $sudo cat /etc/linotp/conf.d/01-debian-database.cfg | \
                sed -ne 's/^DATABASE_URI="\(.*\)"$/\1/p'
    else
        $sudo cat /etc/linotp2/linotp.ini | \
                sed -ne 's/^sqlalchemy\.url *= *\(.*\)$/\1/p'
    fi
}

db_name() {
    # Parse DB uri to get database name
    $sudo python3 -c "
from urllib.parse import urlsplit
print(urlsplit('$(db_uri)').path.strip('/'))
"
}

db_type() {
    # Parse cfg to get database type (mysql/postgres/sqlite)
    uri="$(db_uri)" || exit "$?"

    if [[ "$uri" =~ ^mysql(\+[a-z]+)?:// ]]; then
        echo mysql
    elif [[ "$uri" =~ ^postgres(\+[a-z]+)?:// ]]; then
        echo postgres
    else
        fatal "Database type cannot be parsed from URI: $uri"
    fi
}

db_cli_cmd() {
    # Generate a client command that can be used to execute SQL in
    # the database
    case "$(db_type)" in
        mysql)
            # Mariadb's mysql client does not understand URIs
            # directly, so we use the configuration from the
            # debian packaging to connect to the database
            echo "mysql --defaults-file=/etc/mysql/debian.cnf -NB $(db_name)"
            ;;
        postgres)
            echo "psql -At $(db_uri)"
            ;;
        *)
            fatal "Unknown database type"
            ;;
    esac
}

exec_sql() {
    # Execute SQL in the linotp database and return the result code.
    # The output result is sent to stdout
    sql="$1"

    if [ -z "$sql" ]; then
        fatal "exec_sql() needs to be passed a valid SQL string"
    fi

    # if [ "$(installed_linotp_ver)" = 3 ]; then
    #     db="$(db_name)"
    # else
    #     # Don't try to guess it on the older packages
    #     db=LinOTP2
    # fi

    # Execute sql and return the result
    cmd="$(db_cli_cmd)" || exit "$?"

    if ! (echo "$sql" | $sudo $cmd); then
        >&2 echo "WARNING: Failed to execute SQL:"
        >&2 echo "  echo \"sql\" | $sudo $cmd"
        exit 1
    fi

}
# ---------------------


# Purge existing linotp package
# WARNING: This will remove any existing
# linotp package
purge() {
    if [ "${LINOTP_PURGE_ALLOW-:}" != "yes" ]; then
        echo "
A complete package purge is required but is not allowed.

If you wish to proceed, set the following variable:
    LINOTP_PURGE_ALLOW=yes

WARNING: this will DELETE any existing linotp configuration!
"
        fatal "Confirmation of purge required"
    fi

    error="error"

    if [ -f /var/lib/dpkg/info/linotp.list ]; then

        # Preseed database removal on linotp3
        if [ "$(installed_linotp_ver)" = 3 ]; then
            echo "Preseeding dbconfig-common removal"
            echo "linotp linotp/dbconfig-remove boolean true" | $sudo debconf-set-selections || true
            echo "linotp linotp/purge boolean true" | $sudo debconf-set-selections || true
        else
            # LinOTP 2 problems are not errors for v3 testing
            error="echo"
        fi
        echo "Purging linotp"
        $sudo apt-get --yes purge linotp

        # Drop mysql users if they exist
        $sudo mysql --defaults-file=/etc/mysql/debian.cnf -e "DROP USER IF EXISTS linotp, linotp2;" || true
    fi

    # Check if all directories are removed
    for dir_to_check in \
        /etc/linotp \
        /etc/linotp2 \
        /usr/lib/python3/dist-packages/linotp
      do
        if [ -d $dir_to_check ];then
            $error "not removed: $dir_to_check"
            find $dir_to_check -ls
            $sudo rm -rf $dir_to_check
        fi
    done

    for file_to_check in \
        /etc/apache2/sites-available/linotp.conf \
        /etc/apache2/sites-available/linotp2.conf \
        /etc/apache2/sites-enabled/linotp.conf \
        /etc/apache2/sites-enabled/linotp2.conf
    do
        if [ -f $file_to_check ]; then
            $error "File still present after purge: $file_to_check (removing)"
            # Remove it so that further tests can be run
            $sudo rm "$file_to_check"
        fi
    done

}

register_questions() {
    # Load templates from package into debconf database prior to preseeding
    #
    # We need to do this if we wish to answer debconf questions before we
    # actually install the package.
    #
    # debconf-set-selections will not work if we try to seed questions
    # before it knows about them.

    (
        for name in $*; do
            question=linotp/$name
            case $name in
                apache/*)
                    # Apache questions from linotp
                    template=linotp/$name
                    ;;
                *)
                    # Database questions from dbconfig-common
                    template=dbconfig-common/$name
                    ;;
            esac
            echo "register $template $question"
        done
    ) | $sudo debconf-communicate linotp
}

set_ssl_cert_selection() {
    # Set ssl certificate selection if there is not already a certificate available
    local create

    if [ -f /etc/ssl/certs/linotpserver.pem ]; then
        create="false"
    else
        create="true"
    fi
    echo "linotp linotp/apache/ssl_create boolean $create" \
        | $sudo debconf-set-selections
}

preseed_2() {

    echo "Preseeding linotp2 questions"
    set_ssl_cert_selection
    (
        echo "linotp linotp/apache/activate boolean true"
        echo "linotp linotp/apache/admin_password password admin"

        echo "linotp linotp/mysql/ask_rootpw password $mysql_root_password"
        echo "linotp linotp/tokendb/randompw boolean true"
        echo "linotp linotp/mysql/ask_createdb boolean true"
        echo "linotp linotp/mysql/ask_createtables boolean true"
    ) | $sudo debconf-set-selections

}

preseed_3() {
    echo "Preseeding linotp3 questions for MariaDB database"
    set_ssl_cert_selection
    register_questions dbconfig-install dbconfig-upgrade database-type mysql/app-pass
    (
        echo "linotp linotp/apache/activate boolean true"
        echo "linotp linotp/apache/admin_password password admin"
        echo "linotp linotp/dbconfig-install boolean true"
        echo "linotp linotp/dbconfig-upgrade boolean true"
        echo "linotp linotp/database-type select mysql"
        echo "linotp linotp/mysql/app-pass password DataB123!"
    ) | $sudo debconf-set-selections
}

preseed_3_for_upgrade() {
    register_questions dbconfig-upgrade
    echo "Preseeding linotp3 questions for LinOTP 3 upgrade"
    (
        echo "linotp linotp/dbconfig-upgrade boolean true"
    ) | $sudo debconf-set-selections
}

preseed_3_postgres() {
    preseed_3
    echo "Preseeding linotp3 questions for Postgres database"
    register_questions database-type remote/host pgsql/app-pass
    (
        echo "linotp linotp/database-type    select  pgsql"
        echo "linotp  linotp/remote/host      select  localhost"
        echo "linotp linotp/pgsql/app-pass password DataBPG123!"
    ) | $sudo debconf-set-selections

}

install_2() {
    url="$1"
    linotp2_deb="$toolsdir"/"$(echo $url | grep -o "/[^/]*$")"
    if [ ! -f $linotp2_deb ]; then
        echo "Downloading linotp deb to $toolsdir"
        cd "$toolsdir"
        wget "$url"
    fi

    preseed_2 "$linotp2_deb"

    echo "Installing linotp 2 package"
    DEBIAN_PRIORITY=critical $sudo apt-get --yes --install-recommends install "$linotp2_deb" libapache2-mod-wsgi mariadb-server wget
}

install_3() {
    echo "Installing latest linotp 3 package"
    $sudo apt-get --yes --install-recommends install "$linotp3_deb" libapache2-mod-wsgi-py3
}

check_2() {
    echo "Testing to check we have a working linotp 2 install"
    check_service
    check_data_model_version "2.10.1.0"
}

check_3() {
    echo "Testing to see if all is okay and there are no known configuration problems"

    uri="$(db_uri)" || exit 1

    # Mysql - check encoding
    if [ $(db_type) = mysql ]; then
        if ! [[ "$uri" =~ \?charset=utf8$ ]]; then
            cfgfail "Missing charset in linotp.cfg for mysql database"
        fi
    fi
    check_data_model_version "2.12.0.0"

    for filename in \
            /var/cache/linotp \
            /run/linotp \
            /etc/linotp/conf.d/01-debian-database.cfg
      do
        if [ "$(stat -c %U $filename)" != "linotp" ]; then
            >&2 ls -ld $filename || true
            fatal "$filename should be owned by linotp"
        fi
    done

    check_service
}
# sudo apt purge --yes linotp; sudo mysql --defaults-file=/etc/mysql/debian.cnf -e "DROP USER linotp;"; sudo debconf-set-selections config/linotp-with-mysql-preseed.txt && sudo debi

check_service() {
    # Check we can retrieve manage interface. This gives us an early indication if the install
    # did not work.
    # Param 1 is password (default: admin)
    local password=${1:-admin}
    echo "Retrieving manage interface page"
    if ! wget -nv --user=admin --password="$password" -O /dev/null --no-check-certificate https://localhost/manage; then
        echo "Apache error.log:"
        $sudo tail -n 10 /var/log/apache2/error.log
        fatal "Service is not working - cannot retrieve manage interface page"
    fi
}

check_data_model_version() {
    # Verify that data model version has been set properly. This gives us a quick check
    # to see whether database migrations have been applied
    expected_version=${1-2.10.1.0}

    echo "Checking model version"

    # The SQL we need depends on the database in use
    if [ "$(db_type)" = mysql ]; then
        sql="select Value from Config where Config.Key='linotp.sql_data_model_version'"
    else
        sql="SELECT \"Value\" FROM \"Config\" WHERE \"Key\"='linotp.sql_data_model_version';"
    fi

    if ! model_version="$(exec_sql "$sql")"; then
        fatal "Could not get model version entry from database"
    fi

    if [ "$model_version" != "$expected_version" ]; then
        echo "Database problem - found:$model_version expected:$expected_version"
        echo "sql: $sql"
        fatal "Model version incorrect"
    fi
}


selenium_check() {
    if [ -z "$integration_suite" ]; then
        echo "Integration tests skipped"
        return
    fi

    cd $linotpsrc/linotp/tests/integration
    if [ ! -f "$integration_ini" ]; then
        fatal "Could not find integration settings file: $(pwd)/$integration_ini"
    fi
    params="--tc-file=$integration_ini
        --tc=linotp.protocol:https
        --tc=linotp.port:443
        --tc=linotp.host:localhost
        --tc=linotp.username:admin
        --tc=linotp.password:admin
        -m smoketest"
    echo "$pytest $(echo "$params" | tr -d '\n')"
    "$pytest" $params
}

upgrade2to3() {
    # Purge, install 3, upgrade to 3
    purge
    logtest "upgrade2to3: Purge, install linotp 2, upgrade to linotp 3"
    echo "-- LinOTP 2 --"
    install_2 "$linotp2_deb_url"
    echo "-- LinOTP 3 --"
    preseed_3_for_upgrade
    install_3
    check_3

    if [ -f /etc/apache2/sites-available/linotp2.conf ]; then
        fatal "Old linotp site file present in /etc/apache2/sites-available/linotp2.conf"
    fi
}

install3() {
    purge
    logtest "install3: Install linotp3 from scratch"
    preseed_3
    install_3
    check_3
}

upgrade3() {
    # Upgrade existing package to 3 without a fresh install first
    echo Lintop version to upgrade:
    dpkg-query --no-pager -l linotp | tail -1
    echo "-- LinOTP 3 upgrade --"
    preseed_3_for_upgrade
    install_3
    check_3
}

3reinstall() {
    logtest "3reinstall: Install fresh v3 instance and then reinstall it again"
    install3
    upgrade3
}

mysql_password() {
    logtest "mysql_password: Mysql login check"
    password="T.e.s.t.#123!"
    purge
    preseed_3
    echo "linotp linotp/mysql/app-pass password ${password}" | $sudo debconf-set-selections
    install_3
    check_3
    # Check mysql login is working
    logtest "Check mysql database access"
    dbc_dbname="$($sudo sh -c ". /etc/dbconfig-common/linotp.conf; echo \$dbc_dbname")"
    echo "select * from Config" | mysql --user=linotp --password="${password}" "$dbc_dbname"
}

install3psql() {
    purge
    logtest "install3psql: Postgres install"
    preseed_3_postgres
    install_3
    check_3
}

dpkg_reconfigure() {
    # Reconfigure package using dpkg-reconfigure

    # Prerequestite: The relevant debconf questions
    # are already set

    cmd="dpkg-reconfigure -u linotp"
    echo "Executing $cmd"
    $sudo $cmd
}

htpasswd() {
    # Change login password using debconf interface

    purge
    logtest "htpasswd: Reconfigure testing"
    preseed_3
    install_3
    check_3
    logtest "htpasswd: Changing htpassword using debconf"
    (
        echo "linotp linotp/apache/activate boolean true"
        echo "linotp linotp/apache/admin_password password newpassword"
        echo "linotp  linotp/dbconfig-reinstall boolean false"
    ) | $sudo debconf-set-selections
    dpkg_reconfigure
    check_service "newpassword"

    echo "Test passed, resetting password back to admin"
    (
        echo "linotp linotp/apache/admin_password password admin"
    ) | $sudo debconf-set-selections
    dpkg_reconfigure
    check_service
}

noapache() {
    # Check package can be installed without apache, and
    # can be reconfigured to disable apache

    purge
    logtest "noapache: Install without apache"
    preseed_3
    (
        echo "linotp linotp/apache/activate boolean false"
    ) | $sudo debconf-set-selections
    install_3
    if ! wget -nv --user=admin --password=admin -O /dev/null --no-check-certificate https://localhost/manage; then
      echo "manage interface is unavailable as expected"
    else
      fatal "Fail: Apache should not be configured"
    fi

    logtest "noapache: Install with Apache and then disable"
    install3
    echo "Disabling apache via dpkg-reconfigure"
    (
        echo "linotp linotp/apache/activate boolean false"
        echo "linotp  linotp/dbconfig-reinstall boolean false"
    ) | $sudo debconf-set-selections
    dpkg_reconfigure
    $sudo service apache2 reload
    if ! wget -nv --user=admin --password=admin -O /dev/null --no-check-certificate https://localhost/manage; then
      echo "manage interface is unavailable as expected"
    else
      fatal "Fail: Apache should not be configured"
    fi
}


if [ ! -d "$linotpsrc" ]; then
    error "Linotp source directory not found: $linotpsrc"
    exit 1
fi

# Main command processing
if [ "$#" = 0 ]; then
    show_help
elif [ "$1" == "--help" ]; then
    show_help
elif [[ "$1" =~ ^(upgrade2to3|install3|upgrade3|mysql_password|install3psql|selenium_check|htpasswd|noapache|3reinstall|check_data_model_version|check_3)$ ]]
  then
    # Run the function with the same name as the command line argument
    $1
elif [ "$1" = "3upgrade" ]; then
    logtest "3upgrade: Upgrading to LinOTP 3"
    preseed_3
    install_3
    check_3
elif [ "$1" = "remove" ]; then
    purge
elif [ "$1" = "install2" ]; then
    purge
    logtest "install2: Install linotp 2"
    install_2 "$linotp2_deb_url"
    check_2
    selenium_check
elif [ "$1" = "alltests" ]; then
    logtest "alltests: Running all tests"
    install3
    selenium_check
    upgrade2to3
    selenium_check
    mysql_password
    install3psql
    selenium_check
    htpasswd
    noapache
    3reinstall
else
    show_help
fi

if [ -n "$have_errors" ]; then
    echo "Errors found"
    exit 1
fi
