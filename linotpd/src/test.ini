# -*- coding: utf-8 -*-
#
#    LinOTP - the open source solution for two factor authentication
#    Copyright (C) 2010 - 2018 KeyIdentity GmbH
#
#    This file is part of LinOTP server.
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU Affero General Public
#    License, version 3, as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the
#               GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    E-mail: linotp@keyidentity.com
#    Contact: www.linotp.org
#    Support: www.keyidentity.com
#
#
# LinOTP - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
unitTest = True
debug = False
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

# These are the settings for the RADIUS Token
# The location of the RADIUS dictionary file
radius.dictfile= %(here)s/config/dictionary

# The NAS Identifier of your LinOTP server,
# that is sent to the RADIUS server
radius.nas_identifier = LinOTP


<include> = %(here)s/ldap-config.ini

linotpSecretFile =  %(here)s/encKey

#audit.type = FileAudit
#audit.file.filename = /var/log/linotp/audit.log
linotpAudit.type = linotp.lib.audit.SQLAudit
linotpAudit.sql.url = sqlite:////dev/shm/token-test.db
#linotpAudit.sql.url = postgres://otpd:linotp2d@localhost/otpdb

linotpAudit.key.private =%(here)s/private.pem
linotpAudit.key.public = %(here)s/public.pem

linotpGetotp.active = True


#linotpOpenID.sql.url = postgres://otpd:linotp2d@localhost/otpdb

[server:main]
use = egg:Paste#http
host = 127.0.0.1
port = 5001


[app:main]
use = egg:LinOTP
#sqlalchemy.url = sqlite:///%(here)s/token-test.db
sqlalchemy.url = sqlite:////dev/shm/token-test.db

#sqlalchemy.url = sqlite://
#sqlalchemy.url = postgres://otpd:linotp2d@localhost/otpdb
#sqlalchemy.url = mysql://linotp2:test123!@localhost/LinOTP2
#sqlalchemy.url = mysql://otpd:linotp2d@localhost/otpdb

# for completness all available services here
service.ocra = True
service.testing = True
#service.openid = True
#service.getotp = False
#service.migrate = False

full_stack = true
static_files = true

who.config_file = %(here)s/config/who.ini
who.log_file = %(here)s/who.log
who.log_level = debug


cache_dir = %(here)s/data
beaker.session.key = linotp
beaker.session.secret = somesecret

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false


[handler_hand02]
class=FileHandler
level=WARN
# formatter=form02
args=('python.log', 'w')


# Logging configuration
[loggers]
keys = root, linotp, token, tokenclass, policy, util, config, lib_validate, lib_user, controller
#keys = root, linotp
#keys = root, sqlalchemy

[handlers]
keys = file


[logger_sqlalchemy]
level = WARN
handlers = file
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)




[formatters]
keys = generic

[logger_root]
level = WARN
handlers = file

[logger_routes]
level = WARN
handlers = file
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_controller]
level = DEBUG
handlers = file
qualname = linotp.controllers

[logger_linotp]
level = INFO
handlers = file
qualname = linotp

[logger_lib_user]
level = INFO
handlers = file
qualname = linotp.lib.user

[logger_lib_validate]
level = DEBUG
handlers = file
qualname = linotp.lib.validate

[logger_token]
level = DEBUG
handlers = file
qualname = linotp.lib.token

[logger_tokenclass]
level = DEBUG
handlers = file
qualname = linotp.lib.tokenclass

[logger_policy]
level = INFO
handlers = file
qualname = linotp.lib.policy

[logger_config]
level = WARN
handlers = file
qualname = linotp.lib.config

[logger_util]
level = WARN
handlers = file
qualname = linotp.lib.util

[logger_sqlalchemy]
level = ERROR
handlers = file
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = WARN
formatter = generic

[handler_file]
class = handlers.RotatingFileHandler
# Make the logfiles 10 MB
# and rotate 4  files
args = ('test.log','a', 10000000, 4)
level = DEBUG
formatter = generic


[formatter_generic]
format = %(asctime)s %(levelname)-5.5s {%(thread)d} [%(name)s][%(funcName)s #%(lineno)d] %(message)s
datefmt = %H:%M:%S
