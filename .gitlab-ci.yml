variables:
  LANG: C.UTF-8
  IMAGE_NAME: linotp-build-test-environment_stretch
  BUILD_CODE_IMAGE: $REGISTRY_URL/$IMAGE_NAME:$CI_COMMIT_REF_NAME
  LATEST_CODE_IMAGE: $REGISTRY_URL/$IMAGE_NAME:$CI_PIPELINE_ID
  DOCKERFY_URL: http://avocado.corp.lsexperts.de/jenkins/dockerfy/dockerfy
  DEBIAN_MIRROR: ftp.de.debian.org
  DEPENDENCY_SOURCE: http://avocado.corp.lsexperts.de/deb-repo
  DEPENDENCY_SOURCE_COMPONENT: kideps
  DEPENDENCY_GPG_KEYID: "47868600E7533829"
  DEPENDENCY_GPG_KEYID_URL: ""
  DOCKER_TAGS: $CI_PIPELINE_ID
  CI_IMAGE_PREFIX: $REGISTRY_URL/$CI_PROJECT_NAME/ci
  NOSE_COVER_PACKAGE: linotp
  DOCKER_COMPOSE_VERSION: "1.22.0"
  # Docker network per build - needed for DNS resolution between services (service linotp needs db)
  FF_NETWORK_PER_BUILD: 1
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'           # Execute nightly jobs
    - if: $CI_MERGE_REQUEST_ID                        # Execute jobs in merge request context
    - if: '$CI_COMMIT_BRANCH =~ /^(branch-v|master)/' # Execute jobs when a new commit is pushed to stable or master branch

stages:
  - build-debian-packages
  - build-linotp-docker-image
  - build-test-images
  - lint
  - test
  - coverage-report
  - apidocs
  - upload-debian-packages
  - copy-to-golden

.docker-registry: &docker-registry
  before_script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL

include:
  - template: Code-Quality.gitlab-ci.yml

# The test environment image is based on the linotp image
# and is used to run the unit, functional and e2e tests
build-testenv-image:debian-buster:
  stage: build-test-images
  image: docker:latest
  needs: ["build-linotp-docker-image:buster"]
  <<: *docker-registry
  variables:
    DEBIAN_RELEASE_NAME: buster
    LINOTP_IMAGE: ${DEBIAN_RELEASE_NAME}/linotp:${CI_PIPELINE_ID}
    TESTENV_IMAGE: ${DEBIAN_RELEASE_NAME}/linotp-testenv:${CI_PIPELINE_ID}
  script:
    - docker pull ${CI_IMAGE_PREFIX}/${LINOTP_IMAGE}
    - docker tag ${CI_IMAGE_PREFIX}/${LINOTP_IMAGE} linotp:latest
    - apk add --no-cache make
    - make docker-build-linotp-test-image
    - docker tag linotp_test_env ${CI_IMAGE_PREFIX}/${TESTENV_IMAGE}
    - docker push "${CI_IMAGE_PREFIX}/${TESTENV_IMAGE}"

.lint:
  stage: lint
  image: ${CI_IMAGE_PREFIX}/${DEBIAN_RELEASE_NAME}/linotp-testenv:${CI_PIPELINE_ID}
  needs: ["build-testenv-image:debian-buster"]
  variables:
    LINTED_MODULE: ""
    DEBIAN_RELEASE_NAME: buster
    EXIT_ON_FATAL: "1"
    EXIT_ON_ERROR: "0"
    EXIT_ON_WARNING: "0"
  script:
    - pylint3 linotp/${LINTED_MODULE} && STATUS=0 || STATUS=$?
    - echo STATUS:$STATUS
    - "test $(( $STATUS & 32 )) -eq 0 || (echo 'Fail: usage error'; false)"
    - "test $(( $EXIT_ON_FATAL && $STATUS & 1 )) -eq 0 || (echo 'Fail: Fatal errors'; false)"
    - "test $(( $EXIT_ON_ERROR && $STATUS & 2 )) -eq 0 || (echo 'Fail: Errors'; false)"
    - "test $(( $EXIT_ON_WARNING && $STATUS & 4 )) -eq 0 || (echo 'Fail: Warnings'; false)"

lint-controllers:
  extends: .lint
  variables:
    LINTED_MODULE: controllers

lint-lib:
  extends: .lint
  variables:
    LINTED_MODULE: lib

lint-model:
  extends: .lint
  variables:
    LINTED_MODULE: model

lint-provider:
  extends: .lint
  variables:
    LINTED_MODULE: provider

lint-tokens:
  extends: .lint
  variables:
    LINTED_MODULE: tokens

lint-useridresolver:
  extends: .lint
  variables:
    LINTED_MODULE: useridresolver


.unit-test-base:
  image: ${CI_IMAGE_PREFIX}/${DEBIAN_RELEASE_NAME}/linotp-testenv:${CI_PIPELINE_ID}
  script:
      - make unittests PYTESTARGS="--test-group-count $CI_NODE_TOTAL --test-group=$CI_NODE_INDEX --junitxml=`echo "$CI_JOB_NAME" | tr " /" "_"`.xml"
  artifacts:
    reports:
      junit: linotpd/src/linotp/tests/unit/unit-*.xml

unit-test:
  extends: .unit-test-base
  stage: test
  parallel: 4
  variables:
    DEBIAN_RELEASE_NAME: buster
  needs: ["build-testenv-image:debian-buster"]

.functional-test-base:
  stage: test
  image: ${CI_IMAGE_PREFIX}/${DEBIAN_RELEASE_NAME}/linotp-testenv:${CI_PIPELINE_ID}
  artifacts:
    reports:
      junit: linotpd/src/linotp/tests/functional/functional-*.xml
  needs: ["build-testenv-image:debian-buster"]

#  artifacts:
#    paths:
#      - coverage/${DEBIAN_RELEASE_NAME}/

functional-test:
  extends: .functional-test-base
  parallel: 6
  variables:
    DEBIAN_RELEASE_NAME: buster
  script:
    - make functionaltests PYTESTARGS="--test-group-count=$CI_NODE_TOTAL --test-group=$CI_NODE_INDEX --junitxml=`echo "$CI_JOB_NAME" | tr " /" "_"`.xml"

.functional-test-base-mysql:
  extends: .functional-test-base
  services:
    - name: mysql:5.5
      alias: database
      command: ["mysqld", "--character-set-server=utf8", "--collation-server=utf8_general_ci"]
  variables:
    DEBIAN_RELEASE_NAME: buster
    MYSQL_DATABASE: linotp_db
    MYSQL_ROOT_PASSWORD: rootpass
    MYSQL_USER: linotp
    MYSQL_PASSWORD: linotppass
    LINOTP_DATABASE_URL: mysql+pymysql://linotp:linotppass@database/linotp_db

functional-test-mysql:
  extends: .functional-test-base-mysql
  script:
    - make functionaltests PYTESTARGS="-m exclude_sqlite --junitxml=`echo "$CI_JOB_NAME" | tr " /" "_"`.xml"

functional-test-mysql-nightly:
  extends: .functional-test-base-mysql
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      when: always
  script:
    - make functionaltests PYTESTARGS="--junitxml=`echo "$CI_JOB_NAME" | tr " /" "_"`.xml"

.functional-test-base-mariadb:
  extends: .functional-test-base
  services:
    - name: mariadb:10.1
      alias: database
  variables:
    DEBIAN_RELEASE_NAME: buster
    MYSQL_DATABASE: linotp_db
    MYSQL_ROOT_PASSWORD: rootpass
    MYSQL_USER: linotp
    MYSQL_PASSWORD: linotppass
    LINOTP_DATABASE_URL: mysql+pymysql://linotp:linotppass@database/linotp_db

functional-test-mariadb:
  extends: .functional-test-base-mariadb
  script:
    - make functionaltests PYTESTARGS="-m exclude_sqlite --junitxml=`echo "$CI_JOB_NAME" | tr " /" "_"`.xml"

functional-test-mariadb-nightly:
  extends: .functional-test-base-mariadb
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      when: always
  script:
    - make functionaltests PYTESTARGS="--junitxml=`echo "$CI_JOB_NAME" | tr " /" "_"`.xml"

.functional-test-base-postgres:
  extends: .functional-test-base
  services:
    - name: postgres:12
      alias: database
  variables:
    DEBIAN_RELEASE_NAME: buster
    POSTGRES_DB: linotp_db
    POSTGRES_USER: linotp
    POSTGRES_PASSWORD: "linotppass"
    POSTGRES_HOST_AUTH_METHOD: trust
    LINOTP_DATABASE_URL: postgres://linotp:linotppass@database/linotp_db

functional-test-postgres:
  extends: .functional-test-base-postgres
  script:
    - make functionaltests PYTESTARGS="-m exclude_sqlite --junitxml=`echo "$CI_JOB_NAME" | tr " /" "_"`.xml"

functional-test-postgres-nightly:
  extends: .functional-test-base-postgres
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      when: always
  script:
    - make functionaltests PYTESTARGS="--junitxml=`echo "$CI_JOB_NAME" | tr " /" "_"`.xml"

# Auto-generate API docs using Sphinx.
apidocs:
  stage: apidocs
  image: $CI_IMAGE_PREFIX/buster/linotp:${CI_PIPELINE_ID}
  needs: ["build-linotp-docker-image:buster"]
  script:
    - python3 --version
    - cd linotpd/src
    - pip3 install -e ".[apidocs]"
    - cd ${CI_PROJECT_DIR}/linotpd/src/api-doc
    - make apidocs
    - make html
    - mkdir ${CI_PROJECT_DIR}/api-doc
    - cp -a build/html/. ${CI_PROJECT_DIR}/api-doc
  artifacts:
    name: "linotp-apidocs"
    paths:
      - api-doc
    expire_in: 2 weeks

# .coverage-report:
#   stage: coverage-report
#   image: $CI_IMAGE_PREFIX/${DEBIAN_RELEASE_NAME}/linotp:${CI_PIPELINE_ID}
#   script:
#     - pip3 install coverage
#     - cd coverage/${DEBIAN_RELEASE_NAME}
#     - rm .coverage || true # remove coverage file in case it exists (e.g. re-runs)
#     - coverage combine *
#     - coverage report | tee coverage.txt
#     - coverage html
#   artifacts:
#     paths:
#       - coverage/${DEBIAN_RELEASE_NAME}

# coverage-report:
#   extends: .coverage-report
#   allow_failure: true
#   variables:
#     DEBIAN_RELEASE_NAME: buster

.build-debs:
  stage: build-debian-packages
  image: debian:${DEBIAN_RELEASE_NAME}
  needs: []
  script:
    - apt-get update
    - apt-get install --yes --no-install-recommends equivs git-buildpackage lsb-release rename
    # Generate snapshot entries for debian changelogs
    - ci/update-debian-changelog adminclient/LinOTPAdminClientCLI/src
    - ci/update-debian-changelog linotpd/src
    - (cd linotpd/src && mk-build-deps --install --remove --tool "apt-get --yes --no-install-recommends")
    - make deb-install DESTDIR=pkg/apt/${DEBIAN_RELEASE_NAME}

.normal_build: &normal_build
  artifacts:
    paths:
      - pkg/apt/${DEBIAN_RELEASE_NAME}
    expire_in: 2 weeks
  except:
    - tags

.tag_build: &tag_build
  artifacts:
    paths:
      - pkg/apt/${DEBIAN_RELEASE_NAME}
    expire_in: 1000 years
  only:
    - tags

build:buster:
  extends: .build-debs
  <<: *normal_build
  variables:
    DEBIAN_RELEASE_NAME: buster

build:buster (tag):
  extends: .build-debs
  <<: *tag_build
  variables:
    DEBIAN_RELEASE_NAME: buster

.build-linotp-docker-image:
  stage: build-linotp-docker-image
  image: docker:latest
  retry:
    max: 2
  <<: *docker-registry
  variables:
    DEPENDENCY_SOURCE: ""
    DEPENDENCY_GPG_KEYID: ""
    LINOTP_IMAGE: ${DEBIAN_RELEASE_NAME}/linotp
    DOCKERFILE_PATH: linotpd/src/Dockerfile
  script:
    - export BUILDDIR=build
    - mkdir -p ${BUILDDIR}
    - cp -r pkg/apt/${DEBIAN_RELEASE_NAME} ${BUILDDIR}/apt
    - apk add --no-cache make
    # pull the old image to speedup the build process, the hope is
    # that the modified time will always be the same unless the file
    # has actually been changed
    - DOCKERFILE_CACHE_KEY=$(sha256sum ${DOCKERFILE_PATH} | cut -d ' ' -f1)
    - docker pull "$CI_IMAGE_PREFIX/${DEBIAN_RELEASE_NAME}/linotp:${DOCKERFILE_CACHE_KEY}" || true
    # Do the build itself
    - make DOCKER_BUILD_ARGS=--cache-from="$CI_IMAGE_PREFIX/${DEBIAN_RELEASE_NAME}/linotp:${DOCKERFILE_CACHE_KEY}" DOCKER_IMAGE="${CI_IMAGE_PREFIX}/${DEBIAN_RELEASE_NAME}/linotp" DOCKER_TAGS="${CI_PIPELINE_ID} ${DOCKERFILE_CACHE_KEY}" docker-build-linotp
    # Push images to repository in the form:
    #  registry/ci/release/linotp:pipelineID
    #  registry/ci/release/linotp:sha256
    - docker push "${CI_IMAGE_PREFIX}/${DEBIAN_RELEASE_NAME}/linotp:${CI_PIPELINE_ID}"
    - docker push "${CI_IMAGE_PREFIX}/${DEBIAN_RELEASE_NAME}/linotp:${DOCKERFILE_CACHE_KEY}"
    - docker images

build-linotp-docker-image:buster:
  extends: .build-linotp-docker-image
  needs: ["build:buster"]
  variables:
    DEBIAN_RELEASE_NAME: buster

.e2e-test:
  stage: test
  image: ${CI_IMAGE_PREFIX}/${DEBIAN_RELEASE_NAME}/linotp-testenv:${CI_PIPELINE_ID}
  needs: ["build-testenv-image:debian-buster"]
  services:
    - name: ${DB}
      alias: db
    - name: "${CI_IMAGE_PREFIX}/${DEBIAN_RELEASE_NAME}/linotp:${CI_PIPELINE_ID}"
      alias: test-linotp
    - name: selenium/standalone-chrome-debug
      alias: test-chrome
  variables:
    DEBIAN_RELEASE_NAME: buster
    MYSQL_DATABASE: linotp_db
    MYSQL_ROOT_PASSWORD: linotppass
    MYSQL_USER: linotpuser
    MYSQL_PASSWORD: linotppass
    MYSQL_HOST: mysql
    LINOTP_DB_HOST: "db"
    LINOTP_DB_WAITTIME: 2m
    LINOTP_HOST: "test-linotp"
    LINOTP_PORT: "443"
    LINOTP_PROTOCOL: "https"
    LINOTP_USERNAME: "admin"
    LINOTP_PASSWORD: "admin"
    HEALTHCHECK_PORT: "80"
    SELENIUM_DRIVER: "chrome"
    SELENIUM_PROTOCOL: "http"
    SELENIUM_HOST: "test-chrome"
    SELENIUM_PORT: "4444"
  artifacts:
    reports:
      junit: linotpd/src/linotp/tests/integration/e2e-*.xml

e2e-test-mariadb:
  extends: .e2e-test
  parallel: 2
  variables:
    DB: mariadb:10.1
    LINOTP_DATABASE_URI: "mysql://linotpuser:linotppass@db/linotp_db?charset=utf8"
    LINOTP_DB_PORT: "3306"
  allow_failure: true
  script:
    - cd linotpd/src/linotp/tests/integration
    - /usr/local/bin/dockerfy --template docker_cfg.ini.tmpl:/tmp/server_cfg.ini --wait tcp://$SELENIUM_HOST:$SELENIUM_PORT --timeout 60m --wait tcp://$LINOTP_HOST:$LINOTP_PORT --timeout 60m
    - make integrationtests TCFILE=/tmp/server_cfg.ini PYTESTARGS="-v --test-group-count $CI_NODE_TOTAL --test-group=$CI_NODE_INDEX  --junitxml=`echo "$CI_JOB_NAME" | tr " /" "_"`.xml"

# Upload deb packages to development repository.
# We use scp to upload all the files to an incoming directory.

.before_upload: &before_upload
  before_script:
    # Ensure required variables have been set
    - test -n "${DEV_REPO_HOST}"
    - test -n "${DEV_REPO_KNOWN_HOSTS}"
    - test -n "${DEV_REPO_SSH_SUBMIT_KEY}"
    # Install dependencies
    - apt-get update && apt-get install -y --no-install-recommends devscripts openssh-client
    # Configure ssh
    - eval $(ssh-agent -s)
    - echo "$DEV_REPO_SSH_SUBMIT_KEY" | tr -d '\r' | ssh-add - >/dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "CheckHostIP no" >>~/.ssh/config
    - echo "$DEV_REPO_KNOWN_HOSTS" >~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

upload-debs:
  stage: upload-debian-packages
  image: debian:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'           # Nightly jobs do not upload
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(branch-v|master)/' # Auto upload if merged to stable or master
      when: always
    - if: $CI_COMMIT_TAG                              # Auto upload if tagged
      when: always
    - when: manual                                    # Otherwise allow manual upload from branch
      allow_failure: true
  <<: *before_upload
  script:
    - find pkg/apt/* -ls
    # scp all files referenced by the changes files to the repository
    - dcmd scp pkg/apt/*/*.changes dists@$DEV_REPO_HOST:deb-repo/incoming

# Copy packages to `buster-golden` if they have a `release` tag.
# Note that this must come after `upload-debs`.

copy-to-buster-golden:
  stage: copy-to-golden
  image: debian:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^release/'
      when: always
    - when: manual
      allow_failure: true
  <<: *before_upload
  script:
    - ci/copy-to-golden "$DEBIAN_RELEASE_NAME" pkg/apt/*/*.changes
  variables:
    DEBIAN_RELEASE_NAME: buster
